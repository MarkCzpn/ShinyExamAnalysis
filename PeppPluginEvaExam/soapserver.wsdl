<!--
  ~ Copyright (C) 2019  Electric Paper Evaluationssysteme GmbH
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ~
  ~ Contact:
  ~ Electric Paper
  ~ Evaluationssysteme GmbH
  ~ Konrad-Zuse-Allee 13
  ~ 21337 LÃ¼neburg
  ~ Germany
  -->
<wsdl:definitions
		xmlns:tns="soapserver-v80.wsdl"
		xmlns:xsd="http://www.w3.org/2001/XMLSchema"
		xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
		xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
		xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
		xmlns="http://schemas.xmlsoap.org/wsdl/"
		targetNamespace="soapserver-v80.wsdl"
		name="soapserver">
	<types>
		<xsd:schema targetNamespace="soapserver-v80.wsdl">
			<xsd:element name="Header" type="tns:Header"/>
			<xsd:complexType name="Header">
				<xsd:sequence>
					<xsd:element name="Ticket" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Login" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Password" type="xsd:string" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Coord">
				<xsd:sequence>
					<xsd:element name="x" type="xsd:int"/>
					<xsd:element name="y" type="xsd:int"/>
					<xsd:element name="w" type="xsd:int"/>
					<xsd:element name="h" type="xsd:int"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:simpleType name="Alignment">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="right"/>
					<xsd:enumeration value="left"/>
					<xsd:enumeration value="center"/>
					<xsd:enumeration value="justify"/>
					<xsd:enumeration value=""/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="DateUnit">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="year"/>
					<xsd:enumeration value="month"/>
					<xsd:enumeration value="week"/>
					<xsd:enumeration value="day"/>
					<xsd:enumeration value="hour"/>
					<xsd:enumeration value="minute"/>
					<xsd:enumeration value="second"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="QuestionTypes">
				<xsd:restriction base="xsd:int">
					<xsd:enumeration value="0">
						<xsd:annotation>
							<xsd:documentation>Scaled Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="2">
						<xsd:annotation>
							<xsd:documentation>Open Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="4">
						<xsd:annotation>
							<xsd:documentation>Grade Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="6">
						<xsd:annotation>
							<xsd:documentation>Single Choice Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="8">
						<xsd:annotation>
							<xsd:documentation>Multiple Choice Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="10">
						<xsd:annotation>
							<xsd:documentation>Extended Single Choice Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="14">
						<xsd:annotation>
							<xsd:documentation>Matrix Question</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1001">
						<xsd:annotation>
							<xsd:documentation>Pole Definition</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1002">
						<xsd:annotation>
							<xsd:documentation>Empty Line</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1003">
						<xsd:annotation>
							<xsd:documentation>Separator Line</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1004">
						<xsd:annotation>
							<xsd:documentation>Text Section</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1005">
						<xsd:annotation>
							<xsd:documentation>Page Break</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1006">
						<xsd:annotation>
							<xsd:documentation>Extended Pole Definition</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1007">
						<xsd:annotation>
							<xsd:documentation>Image</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1008">
						<xsd:annotation>
							<xsd:documentation>Column Separator</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
					<xsd:enumeration value="1009">
						<xsd:annotation>
							<xsd:documentation>Paragraph Separator</xsd:documentation>
						</xsd:annotation>
					</xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="CourseIdType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="INTERNAL"/>
					<xsd:enumeration value="PUBLIC"/>
					<xsd:enumeration value="EXTERNAL"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="SubunitIdType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="INTERNAL"/>
					<xsd:enumeration value="NAME"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="UserIdType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="INTERNAL"/>
					<xsd:enumeration value="LOGIN"/>
					<xsd:enumeration value="EXTERNAL"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="FormIdType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="INTERNAL"/>
					<xsd:enumeration value="FORMNAME"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="PeriodIdType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="INTERNAL"/>
					<xsd:enumeration value="PERIODNAME"/>
					<xsd:enumeration value="PERIODDATE"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="PDFDefinitionCreationMode">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="INCLUSIVE"/>
					<xsd:enumeration value="EXCLUSIVE"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="OnlineLayoutType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="COMPLETE"/>
					<xsd:enumeration value="CHAPTER"/>
					<xsd:enumeration value="PAGE"/>
					<xsd:enumeration value="QUESTION"/>
					<xsd:enumeration value="PAPER"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="BatchIdType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="VERIFIER_BATCH"/>
					<xsd:enumeration value="SCAN_BATCH"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="FormProcedure">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="ALL"/>
					<xsd:enumeration value="CENTRALEVALUATION"/>
					<xsd:enumeration value="DECENTRALEVALUATION"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:simpleType name="FormSurveyType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="ALL"/>
					<xsd:enumeration value="PAPER"/>
					<xsd:enumeration value="ONLINE"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="StringList">
				<xsd:sequence>
					<xsd:element name="Strings" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="IDList">
				<xsd:sequence>
					<xsd:element name="ID" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ValueList">
				<xsd:sequence>
					<xsd:element name="Value" type="xsd:int" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="KeyValuePair">
				<xsd:all>
					<xsd:element name="Key" type="xsd:string"/>
					<xsd:element name="Value" type="xsd:string" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="KeyValueList">
				<xsd:sequence>
					<xsd:element name="KeyValuePair" type="tns:KeyValuePair" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:simpleType name="FormSelectField">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="ShortName"/>
					<xsd:enumeration value="Description"/>
					<xsd:enumeration value="OwnerId"/>
					<xsd:enumeration value="OriginalId"/>
					<xsd:enumeration value="CreateDate"/>
					<xsd:enumeration value="ChangeDate"/>
					<xsd:enumeration value="IsUsed"/>
					<xsd:enumeration value="IsParent"/>
					<xsd:enumeration value="MainLanguageId"/>
					<xsd:enumeration value="FormEngine"/>
					<xsd:enumeration value="IsMirror"/>
					<xsd:enumeration value="OnlineTempSave"/>
					<xsd:enumeration value="HeadLogoId"/>
					<xsd:enumeration value="AnswerBoxSize"/>
					<xsd:enumeration value="PageFormat"/>
					<xsd:enumeration value="ShowNumeration"/>
					<xsd:enumeration value="PageOrientation"/>
					<xsd:enumeration value="EngineSubType"/>
					<xsd:enumeration value="FormOptions"/>
					<xsd:enumeration value="ExtraOptions"/>
					<xsd:enumeration value="URL"/>
					<xsd:enumeration value="HasCustom"/>
					<xsd:enumeration value="PageCount"/>
					<xsd:enumeration value="TeleFormId"/>
					<xsd:enumeration value="LockForm"/>
					<xsd:enumeration value="Active"/>
					<xsd:enumeration value="Range"/>
					<xsd:enumeration value="SurveyType"/>
					<xsd:enumeration value="SurveySumReport"/>
					<xsd:enumeration value="OnlineWizard"/>
					<xsd:enumeration value="Template"/>
					<xsd:enumeration value="RowHeight"/>
					<xsd:enumeration value="FontFamily"/>
					<xsd:enumeration value="DefaultFontSize"/>
					<xsd:enumeration value="Extensible"/>
					<xsd:enumeration value="Version"/>
					<xsd:enumeration value="MaxPages"/>
					<xsd:enumeration value="DefaultLeft"/>
					<xsd:enumeration value="DefaultRight"/>
					<xsd:enumeration value="DefaultAbstention"/>
					<xsd:enumeration value="PDFVersion"/>
					<xsd:enumeration value="OrganisationField"/>
					<xsd:enumeration value="AuthorField"/>
					<xsd:enumeration value="SubunitField"/>
					<xsd:enumeration value="CourseField"/>
					<xsd:enumeration value="MarkField"/>
					<xsd:enumeration value="CorrectionField"/>
					<xsd:enumeration value="MaxQuestions"/>
					<xsd:enumeration value="IsOnlinePrint"/>
					<xsd:enumeration value="EditorVersion"/>
					<xsd:enumeration value="Certificate"/>
					<xsd:enumeration value="ResultView"/>
					<xsd:enumeration value="ResultViewOpenQuestions"/>
					<xsd:enumeration value="AddItemsOnlyToBottom"/>
					<xsd:enumeration value="ShowOnlineSurveyDetails"/>
					<xsd:enumeration value="DefaultReportId"/>
					<xsd:enumeration value="Colorscheme"/>
					<xsd:enumeration value="HeadHeight"/>
					<xsd:enumeration value="HeadLogoPositionH"/>
					<xsd:enumeration value="HeadLogoPositionV"/>
					<xsd:enumeration value="HeadLogoSize"/>
					<xsd:enumeration value="Field_Row3_Field1"/>
					<xsd:enumeration value="Field_Row3_Field2"/>
					<xsd:enumeration value="Field_Row4_Field1"/>
					<xsd:enumeration value="Field_Row4_Field2"/>
					<xsd:enumeration value="Field_Row5_Field1"/>
					<xsd:enumeration value="Field_Row5_Field2"/>
					<xsd:enumeration value="Field_Row6_Field1"/>
					<xsd:enumeration value="Field_Row6_Field2"/>
					<xsd:enumeration value="Field_Row7_Field1"/>
					<xsd:enumeration value="Field_Row7_Field2"/>
					<xsd:enumeration value="Field_Row8_Field1"/>
					<xsd:enumeration value="Field_Row8_Field2"/>
					<xsd:enumeration value="Field_Row9_Field1"/>
					<xsd:enumeration value="Field_Row9_Field2"/>
					<xsd:enumeration value="Field_Row10_Field1"/>
					<xsd:enumeration value="Field_Row10_Field2"/>
					<xsd:enumeration value="Config"/>
					<xsd:enumeration value="Layout"/>
					<xsd:enumeration value="SCAnswerPosition"/>
					<xsd:enumeration value="FormFolderName"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="FormSelectFieldList">
				<xsd:sequence>
					<xsd:element name="FormSelectField" type="tns:FormSelectField" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:simpleType name="EntityListValue">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Subunit"/>
					<xsd:enumeration value="User"/>
					<xsd:enumeration value="Course"/>
					<xsd:enumeration value="Survey"/>
					<xsd:enumeration value="Participant"/>
					<xsd:enumeration value="Log"/>
					<xsd:enumeration value="Delivery"/>
					<xsd:enumeration value="Notices"/>
					<xsd:enumeration value="Results"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="EntityList">
				<xsd:sequence>
					<xsd:element name="EntityListValue" type="tns:EntityListValue" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Course">
				<xsd:all>
					<xsd:element name="m_nCourseId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sProgramOfStudy" type="xsd:string"/>
					<xsd:element name="m_sCourseTitle" type="xsd:string"/>
					<xsd:element name="m_sRoom" type="xsd:string"/>
					<xsd:element name="m_nCourseType" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sPubCourseId" type="xsd:string"/>
					<xsd:element name="m_sExternalId" type="xsd:string"/>
					<xsd:element name="m_nCountStud" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sCustomFieldsJSON" type="xsd:string"/>
					<xsd:element name="m_nUserId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nFbid" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nPeriodId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_aoParticipants" type="tns:PersonList"/>
					<xsd:element name="m_aoSecondaryInstructors" type="tns:UserList"/>
					<xsd:element name="m_oSurveyHolder" type="tns:SurveyHolder"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="CourseList">
				<xsd:sequence>
					<xsd:element name="Courses" type="tns:Course" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="User">
				<xsd:all>
					<xsd:element name="m_nId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nType" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sLoginName" type="xsd:string"/>
					<xsd:element name="m_sExternalId" type="xsd:string"/>
					<xsd:element name="m_sTitle" type="xsd:string"/>
					<xsd:element name="m_sFirstName" type="xsd:string"/>
					<xsd:element name="m_sSurName" type="xsd:string"/>
					<xsd:element name="m_sUnitName" type="xsd:string"/>
					<xsd:element name="m_sAddress" type="xsd:string"/>
					<xsd:element name="m_sEmail" type="xsd:string"/>
					<xsd:element name="m_nFbid" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nAddressId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sPassword" type="xsd:string"/>
					<xsd:element name="m_sPhoneNumber" type="xsd:string"/>
					<xsd:element name="m_bUseLDAP" type="xsd:boolean" nillable="true"/>
					<xsd:element name="m_bActiveUser" type="xsd:boolean" nillable="true"/>
					<xsd:element name="m_aCourses" type="tns:CourseList" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="UserList">
				<xsd:sequence>
					<xsd:element name="Users" type="tns:User" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Person">
				<xsd:all>
					<xsd:element name="m_nId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sTitle" type="xsd:string"/>
					<xsd:element name="m_sFirstname" type="xsd:string"/>
					<xsd:element name="m_sLastname" type="xsd:string"/>
					<xsd:element name="m_sIdentifier" type="xsd:string"/>
					<xsd:element name="m_sEmail" type="xsd:string"/>
					<xsd:element name="m_nGender" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sAddress" type="xsd:string" nillable="true"/>
					<xsd:element name="m_sCustomFieldsJSON" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="PersonList">
				<xsd:sequence>
					<xsd:element name="Persons" type="tns:Person" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyParticipant">
				<xsd:all>
					<xsd:element name="ResultId" type="xsd:string"/>
					<xsd:element name="Person" type="tns:Person"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ParticipantList">
				<xsd:sequence>
					<xsd:element name="SurveyParticipant" type="tns:SurveyParticipant" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Period">
				<xsd:all>
					<xsd:element name="m_nPeriodId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sTitel" type="xsd:string"/>
					<xsd:element name="m_sStartDate" type="xsd:string"/>
					<xsd:element name="m_sEndDate" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="PeriodList">
				<xsd:sequence>
					<xsd:element name="Periods" type="tns:Period" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SimpleForm">
				<xsd:all>
					<xsd:element name="ID" type="xsd:int" nillable="true"/>
					<xsd:element name="Name" type="xsd:string"/>
					<xsd:element name="OwnerID" type="xsd:int" nillable="true"/>
					<xsd:element name="FormEngine" type="xsd:int" nillable="true"/>
					<xsd:element name="CustomReportList" type="tns:CustomReportList"/>
					<xsd:element name="UsageRestrictionList" type="tns:UsageRestrictionList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="SimpleFormList">
				<xsd:sequence>
					<xsd:element name="SimpleForms" type="tns:SimpleForm" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VFFormList">
				<xsd:sequence>
					<xsd:element name="VFForm" type="tns:VFForm" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VFForm">
				<xsd:all>
					<xsd:element name="FormId" type="xsd:int" nillable="true"/>
					<xsd:element name="FormName" type="xsd:string"/>
					<xsd:element name="FormTitle" type="xsd:string"/>
					<xsd:element name="OwnerId" type="xsd:int" nillable="true"/>
					<xsd:element name="IsMirrored" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="PaperFormat" type="xsd:string"/>
					<xsd:element name="ShowNumeration" type="xsd:boolean"/>
					<xsd:element name="AnswerBoxSize" type="xsd:int" nillable="true"/>
					<xsd:element name="MaxPages" type="xsd:int" nillable="true"/>
					<xsd:element name="MaxQuestions" type="xsd:int" nillable="true"/>
					<xsd:element name="FontFamily" type="xsd:string"/>
					<xsd:element name="FontSize" type="xsd:int" nillable="true"/>
					<xsd:element name="RowHeight" type="xsd:int" nillable="true"/>
					<xsd:element name="CreateDate" type="xsd:string"/>
					<xsd:element name="IsActivated" type="xsd:boolean"/>
					<xsd:element name="IsExtensible" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="ResultAccess" type="xsd:boolean"/>
					<xsd:element name="HeadLineUpperLeft" type="xsd:string"/>
					<xsd:element name="HeadLineLowerLeft" type="xsd:string"/>
					<xsd:element name="HeadLineUpperRight" type="xsd:string"/>
					<xsd:element name="HeadLineLowerRight" type="xsd:string"/>
					<xsd:element name="HeadLineMark" type="xsd:string"/>
					<xsd:element name="HeadLineCorrection" type="xsd:string"/>
					<xsd:element name="ItemGroupList" type="tns:ItemGroupList"/>
					<xsd:element name="HeaderLineCount" type="xsd:int" nillable="true"/>
					<xsd:element name="AdditionalHeaderLineList" type="tns:AdditionalHeaderLineList"/>
					<xsd:element name="OnlineLayout" type="tns:OnlineLayoutType" minOccurs="0"/>
					<xsd:element name="FormFolderName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="LastChangeDate" type="xsd:string" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="AdditionalHeaderLine">
				<xsd:all>
					<xsd:element name="LeftFieldContent" type="xsd:string" nillable="true"/>
					<xsd:element name="RightFieldContent" type="xsd:string" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="AdditionalHeaderLineList">
				<xsd:sequence>
					<xsd:element name="AdditionalHeaderLines" type="tns:AdditionalHeaderLine" minOccurs="0" maxOccurs="8"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ItemGroup">
				<xsd:all>
					<xsd:element name="ItemGroupId" type="xsd:int" nillable="true"/>
					<xsd:element name="Position" type="xsd:int" nillable="true"/>
					<xsd:element name="Title" type="xsd:string"/>
					<xsd:element name="Description" type="xsd:string"/>
					<xsd:element name="IndicatorDimension" type="xsd:int" nillable="true"/>
					<xsd:element name="IsText" type="xsd:boolean"/>
					<xsd:element name="FontSize" type="xsd:int" nillable="true"/>
					<xsd:element name="ItemList" type="tns:ItemList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemGroupList">
				<xsd:sequence>
					<xsd:element name="ItemGroups" type="tns:ItemGroup" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Item">
				<xsd:all>
					<xsd:element name="ItemId" type="xsd:int" nillable="true"/>
					<xsd:element name="Position" type="xsd:int" nillable="true"/>
					<xsd:element name="Title" type="xsd:string"/>
					<xsd:element name="ItemCode" type="xsd:string"/>
					<xsd:element name="AnswerCount" type="xsd:int" nillable="true"/>
					<xsd:element name="Type" type="tns:QuestionTypes"/>
					<xsd:element name="Options" type="tns:StringList" nillable="true"/>
					<xsd:element name="GraphType" type="xsd:string"/>
					<xsd:element name="Abstention" type="xsd:string"/>
					<xsd:element name="Orientation" type="xsd:string"/>
					<xsd:element name="RowCount" type="xsd:int" nillable="true"/>
					<xsd:element name="IsMirrored" type="xsd:boolean"/>
					<xsd:element name="UseIcr" type="xsd:string"/>
					<xsd:element name="IcrType" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="IcrClassifier" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="OptionValue" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="AnswerPosition" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="ShowDropdown" type="xsd:boolean"/>
					<xsd:element name="MaximalAnswers" type="xsd:int" nillable="true"/>
					<xsd:element name="Alignment" type="tns:Alignment"/>
					<xsd:element name="Degree" type="xsd:int" nillable="true"/>
					<xsd:element name="IsRequired" type="xsd:boolean" nillable="true"/>
					<xsd:element name="DualScaleFieldId" type="xsd:int" minOccurs="0"/>
					<xsd:element name="DualScalePosition" type="xsd:int" minOccurs="0"/>
					<xsd:element name="ExportValues" type="tns:ValueList" minOccurs="0" nillable="true"/>
					<xsd:element name="OptionIndexes" type="tns:ValueList" minOccurs="0" nillable="true"/>
					<xsd:element name="ExtraOptions" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemList">
				<xsd:sequence>
					<xsd:element name="Items" type="tns:Item" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Survey">
				<xsd:all>
					<xsd:element name="m_nSurveyId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nState" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sTitle" type="xsd:string"/>
					<xsd:element name="m_cType" type="xsd:string"/>
					<xsd:element name="m_nFrmid" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nStuid" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nVerid" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nOpenState" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nFormCount" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nPswdCount" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sLastDataCollectionDate" type="xsd:string"/>
					<xsd:element name="m_nPageLinkOffset" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sMaskTan" type="xsd:string"/>
					<xsd:element name="m_nMaskState" nillable="true" type="xsd:int"/>
					<xsd:element name="m_oPeriod" type="tns:Period" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="SurveyList">
				<xsd:sequence>
					<xsd:element name="Surveys" type="tns:Survey" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyHolder">
				<xsd:all>
					<xsd:element name="m_aSurveys" type="tns:SurveyList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="Unit">
				<xsd:all>
					<xsd:element name="m_nId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sName" type="xsd:string"/>
					<xsd:element name="m_nPublicUnitNumber" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nImageAccess" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sPostCode" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="m_sCity" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="m_sStreet" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="m_sPhoneNumber" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="m_sFax" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="m_sEmail" type="xsd:string" nillable="true" minOccurs="0"/>
					<xsd:element name="m_aUsers" type="tns:UserList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="UnitList">
				<xsd:sequence>
					<xsd:element name="Units" type="tns:Unit" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="OnlineSurveyKey">
				<xsd:all>
					<xsd:element name="CourseId" type="xsd:string"/>
					<xsd:element name="TransactionNumber" type="xsd:string"/>
					<xsd:element name="CourseName" type="xsd:string"/>
					<xsd:element name="Instructor" type="tns:Instructor"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="OnlineSurveyKeyList">
				<xsd:sequence>
					<xsd:element name="OnlineSurveyKeys" type="tns:OnlineSurveyKey" minOccurs="0" maxOccurs="unbounded" nillable="true"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyType">
				<xsd:all>
					<xsd:element name="m_chSurveyType" type="xsd:string"/>
					<xsd:element name="m_sDescription" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="SurveyTypeList">
				<xsd:sequence>
					<xsd:element name="SurveyTypes" type="tns:SurveyType" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="OnlineCode">
				<xsd:all>
					<xsd:element name="m_sOnlineCode" type="xsd:string"/>
					<xsd:element name="m_nCodeType" type="xsd:int" nillable="true"/>
					<xsd:element name="m_nSurveyId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sRecipientMailAddress" type="xsd:string"/>
					<xsd:element name="m_sDirectOnlineLink" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="OnlineCodeList">
				<xsd:sequence>
					<xsd:element name="OnlineCodes" type="tns:OnlineCode" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="InvitationTask">
				<xsd:sequence>
					<xsd:element name="SurveyID" type="xsd:string"/>
					<xsd:element name="StartTime" type="xsd:dateTime" nillable="true"/>
					<xsd:element name="TaskID" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Status" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SenderName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SenderEmail" type="xsd:string" minOccurs="0"/>
					<xsd:element name="EmailText" type="xsd:string" minOccurs="0"/>
					<xsd:element name="EmailSubject" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SendInstructorNotification" type="xsd:boolean" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="RemindTask">
				<xsd:sequence>
					<xsd:element name="SurveyID" type="xsd:string"/>
					<xsd:element name="StartTime" type="xsd:dateTime" nillable="true"/>
					<xsd:element name="TaskID" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Status" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SenderName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SenderEmail" type="xsd:string" minOccurs="0"/>
					<xsd:element name="EmailText" type="xsd:string" minOccurs="0"/>
					<xsd:element name="EmailSubject" type="xsd:string" minOccurs="0"/>
					<xsd:element name="RepeatAfterDays" type="xsd:int" nillable="true" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ResponseRateTask">
				<xsd:sequence>
					<xsd:element name="SurveyID" type="xsd:string"/>
					<xsd:element name="StartTime" type="xsd:dateTime" nillable="true"/>
					<xsd:element name="TaskID" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Status" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ResponseRateValue" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="CalcMethod" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="MailToInstructor" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="MailToDean" type="xsd:boolean" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CloseTask">
				<xsd:sequence>
					<xsd:element name="SurveyID" type="xsd:string"/>
					<xsd:element name="StartTime" type="xsd:dateTime" nillable="true"/>
					<xsd:element name="TaskID" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Status" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SendReport" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="SendParticipantMail" type="xsd:boolean" minOccurs="0" nillable="true"/>
					<xsd:element name="SenderNameParticipantMail" type="xsd:string" minOccurs="0" nillable="true"/>
					<xsd:element name="SenderEmailParticipantMail" type="xsd:string" minOccurs="0" nillable="true"/>
					<xsd:element name="EmailSubjectParticipantMail" type="xsd:string" minOccurs="0" nillable="true"/>
					<xsd:element name="EmailTextParticipantMail" type="xsd:string" minOccurs="0" nillable="true"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="TaskList">
				<xsd:sequence>
					<xsd:element name="InvitationTask" type="tns:InvitationTask" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="RemindTask" type="tns:RemindTask" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="ResponseRateTask" type="tns:ResponseRateTask" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="CloseTask" type="tns:CloseTask" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CourseCreator">
				<xsd:sequence>
					<xsd:element name="CourseUid" type="xsd:string"/>
					<xsd:element name="CourseName" type="xsd:string"/>
					<xsd:element name="CourseCode" type="xsd:string"/>
					<xsd:element name="CourseType" type="xsd:string"/>
					<xsd:element name="CourseProgramOfStudy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CourseEnrollment" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="CustomFieldsJSON" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CoursePeriodId" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CoursePeriodIdType" type="tns:PeriodIdType" minOccurs="0"/>
					<xsd:element name="InstructorList" type="tns:InstructorList"/>
					<xsd:element name="RoomName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SubunitName" type="xsd:string"/>
					<xsd:element name="ParticipantList" type="tns:PersonList" minOccurs="0"/>
					<xsd:element name="AnonymousParticipants" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="SurveyCreatorList" type="tns:SurveyCreatorList" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CourseCreatorList">
				<xsd:sequence>
					<xsd:element name="CourseCreators" type="tns:CourseCreator" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyCreator">
				<xsd:sequence>
					<xsd:element name="FormId" type="xsd:string"/>
					<xsd:element name="FormIdType" type="tns:FormIdType"/>
					<xsd:element name="PeriodId" type="xsd:string"/>
					<xsd:element name="PeriodIdType" type="tns:PeriodIdType"/>
					<xsd:element name="SurveyType" type="tns:SurveyType"/>
					<xsd:element name="Verification" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="Notice" type="xsd:string" minOccurs="0"/>
					<xsd:element name="FormRecipientList" type="tns:EmailAddressList" minOccurs="0"/>
					<xsd:element name="InviteParticipants" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="InvitationTask" type="tns:InvitationTask" minOccurs="0"/>
					<xsd:element name="RemindTask" type="tns:RemindTask" minOccurs="0"/>
					<xsd:element name="ResponseRateTask" type="tns:ResponseRateTask" minOccurs="0"/>
					<xsd:element name="CloseTask" type="tns:CloseTask" minOccurs="0"/>
					<xsd:element name="SerialPrint" type="xsd:boolean" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyCreatorList">
				<xsd:sequence>
					<xsd:element name="SurveyCreators" type="tns:SurveyCreator" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Instructor">
				<xsd:sequence>
					<xsd:element name="InstructorUid" type="xsd:string"/>
					<xsd:element name="InstructorLogin" type="xsd:string" minOccurs="0"/>
					<xsd:element name="FirstName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="LastName" type="xsd:string"/>
					<xsd:element name="Title" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Gender" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Email" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Phone" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Language" type="xsd:string" minOccurs="0"/>
					<xsd:element name="IsActiveUser" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ProjectName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Address" type="xsd:string" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="InstructorList">
				<xsd:sequence>
					<xsd:element name="Instructors" type="tns:Instructor" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyStatus">
				<xsd:all>
					<xsd:element name="SurveyId" type="xsd:int" nillable="true"/>
					<xsd:element name="SurveyStatus" type="xsd:string"/>
					<xsd:element name="StatusMessage" type="tns:StringList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="SurveyStatusList">
				<xsd:sequence>
					<xsd:element name="SurveyStatusArray" type="tns:SurveyStatus" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="UploadStatus">
				<xsd:all>
					<xsd:element name="CourseUid" type="xsd:string"/>
					<xsd:element name="StatusId" type="xsd:string"/>
					<xsd:element name="StatusMessage" type="xsd:string"/>
					<xsd:element name="SurveyStatusList" type="tns:SurveyStatusList" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="UploadStatusList">
				<xsd:sequence>
					<xsd:element name="UploadStatus" type="tns:UploadStatus" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="PDFPlugin">
				<xsd:all>
					<xsd:element name="PluginId" type="xsd:int"/>
					<xsd:element name="Title" type="xsd:string"/>
					<xsd:element name="ClassName" type="xsd:string"/>
					<xsd:element name="IsDefault" type="xsd:boolean"/>
					<xsd:element name="IsCustomPlugin" type="xsd:boolean"/>
					<xsd:element name="ReportType" type="xsd:int"/>
					<xsd:element name="Owner" type="xsd:int"/>
					<xsd:element name="Path" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="PDFPluginList">
				<xsd:sequence>
					<xsd:element name="PDFPlugins" type="tns:PDFPlugin" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyRawDataList">
				<xsd:sequence>
					<xsd:element name="SurveyRawDataArray" type="tns:SurveyRawData" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyRawData">
				<xsd:all>
					<xsd:element name="Survey" type="tns:Survey"/>
					<xsd:element name="SheetResults" type="tns:ItemAnswerListList"/>
					<xsd:element name="ParticipantList" type="tns:ParticipantList" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemAnswer">
				<xsd:all>
					<xsd:element name="ItemId" type="xsd:int" nillable="true"/>
					<xsd:element name="ItemCode" type="xsd:string"/>
					<xsd:element name="ItemValue" type="xsd:string"/>
					<xsd:element name="ResultId" type="xsd:string"/>
					<xsd:element name="ItemOptionIndex" type="xsd:int" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemAnswerList">
				<xsd:sequence>
					<xsd:element name="ItemAnswers" type="tns:ItemAnswer" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ItemAnswerListList">
				<xsd:sequence>
					<xsd:element name="ItemAnswerLists" type="tns:ItemAnswerList" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SurveyResult">
				<xsd:all>
					<xsd:element name="Survey" type="tns:Survey"/>
					<xsd:element name="ItemResults" type="tns:ItemResultList"/>
					<xsd:element name="ItemGroupResults" type="tns:ItemGroupResultList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemResult">
				<xsd:all>
					<xsd:element name="ItemId" type="xsd:int" nillable="true"/>
					<xsd:element name="ItemCode" type="xsd:string"/>
					<xsd:element name="ResponseCount" type="xsd:int" nillable="true"/>
					<xsd:element name="AbstentionCount" type="xsd:int" nillable="true"/>
					<xsd:element name="FrequencyDistribution" type="tns:FrequencyList"/>
					<xsd:element name="Mean" type="xsd:float"/>
					<xsd:element name="StdDev" type="xsd:float"/>
					<xsd:element name="Median" type="xsd:float"/>
					<xsd:element name="Norm" type="xsd:float"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemResultList">
				<xsd:sequence>
					<xsd:element name="ItemResults" type="tns:ItemResult" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="FrequencyList">
				<xsd:sequence>
					<xsd:element name="Frequencies" type="xsd:float" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ItemGroupResult">
				<xsd:all>
					<xsd:element name="ItemGroupId" type="xsd:int" nillable="true"/>
					<xsd:element name="Mean" type="xsd:float"/>
					<xsd:element name="StdDev" type="xsd:float"/>
					<xsd:element name="Norm" type="xsd:float"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemGroupResultList">
				<xsd:sequence>
					<xsd:element name="ItemGroupResults" type="tns:ItemGroupResult" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CustomReportList">
				<xsd:sequence>
					<xsd:element name="CustomReports" type="tns:CustomReport" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CustomReport">
				<xsd:all>
					<xsd:element name="ID" type="xsd:int" nillable="true"/>
					<xsd:element name="Name" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:simpleType name="EmailAddress">
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="[^@]+@[^\.]+\..+"/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="EmailAddressList">
				<xsd:sequence>
					<xsd:element name="EmailAddresses" type="tns:EmailAddress" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CustomModuleForm">
				<xsd:all>
					<xsd:element name="FormTitle" type="xsd:string"/>
					<xsd:element name="OwnerId" type="xsd:int" nillable="true"/>
					<xsd:element name="PaperFormat" type="xsd:string"/>
					<xsd:element name="ShowNumeration" type="xsd:boolean"/>
					<xsd:element name="AnswerBoxSize" type="xsd:int" nillable="true"/>
					<xsd:element name="MaxPages" type="xsd:int" nillable="true"/>
					<xsd:element name="MaxQuestions" type="xsd:int" nillable="true"/>
					<xsd:element name="FontFamily" type="xsd:string"/>
					<xsd:element name="FontSize" type="xsd:int" nillable="true"/>
					<xsd:element name="RowHeight" type="xsd:int" nillable="true"/>
					<xsd:element name="CreateDate" type="xsd:string"/>
					<xsd:element name="IsActivated" type="xsd:boolean"/>
					<xsd:element name="ResultAccess" type="xsd:boolean"/>
					<xsd:element name="HeadLineUpperLeft" type="xsd:string"/>
					<xsd:element name="HeadLineLowerLeft" type="xsd:string"/>
					<xsd:element name="HeadLineUpperRight" type="xsd:string"/>
					<xsd:element name="HeadLineLowerRight" type="xsd:string"/>
					<xsd:element name="HeadLineMark" type="xsd:string"/>
					<xsd:element name="HeadLineCorrection" type="xsd:string"/>
					<xsd:element name="ItemGroupList" type="tns:ModuleItemGroupList"/>
					<xsd:element name="HeaderLineCount" type="xsd:int" nillable="true"/>
					<xsd:element name="AdditionalHeaderLineList" type="tns:AdditionalHeaderLineList"/>
					<xsd:element name="OnlineLayout" type="tns:OnlineLayoutType" minOccurs="0"/>
					<xsd:element name="FormFolderName" type="xsd:string" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ModuleItemGroup">
				<xsd:all>
					<xsd:element name="Position" type="xsd:int" nillable="true"/>
					<xsd:element name="Title" type="xsd:string"/>
					<xsd:element name="SessionUid" type="xsd:string"/>
					<xsd:element name="Description" type="xsd:string"/>
					<xsd:element name="IndicatorDimension" type="xsd:int" nillable="true"/>
					<xsd:element name="IsText" type="xsd:boolean"/>
					<xsd:element name="FontSize" type="xsd:int" nillable="true"/>
					<xsd:element name="ItemList" type="tns:ItemList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ModuleItemGroupList">
				<xsd:sequence>
					<xsd:element name="ItemGroups" type="tns:ModuleItemGroup" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ModuleSurveyCreator">
				<xsd:sequence>
					<xsd:element name="PeriodId" type="xsd:string"/>
					<xsd:element name="PeriodIdType" type="tns:PeriodIdType"/>
					<xsd:element name="SurveyType" type="tns:SurveyType"/>
					<xsd:element name="Verification" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="Notice" type="xsd:string" minOccurs="0"/>
					<xsd:element name="FormRecipientList" type="tns:EmailAddressList" minOccurs="0"/>
					<xsd:element name="InviteParticipants" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="InvitationTask" type="tns:InvitationTask" minOccurs="0"/>
					<xsd:element name="RemindTask" type="tns:RemindTask" minOccurs="0"/>
					<xsd:element name="ResponseRateTask" type="tns:ResponseRateTask" minOccurs="0"/>
					<xsd:element name="CloseTask" type="tns:CloseTask" minOccurs="0"/>
					<xsd:element name="DeleteExistingSurvey" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="FormOwnerId" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="CustomModuleForm" type="tns:CustomModuleForm" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ModuleSurveyCreatorList">
				<xsd:sequence>
					<xsd:element name="ModuleSurveyCreators" type="tns:ModuleSurveyCreator" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ModuleCourse">
				<xsd:sequence>
					<xsd:element name="Uid" type="xsd:string"/>
					<xsd:element name="Name" type="xsd:string"/>
					<xsd:element name="Code" type="xsd:string"/>
					<xsd:element name="Type" type="xsd:string"/>
					<xsd:element name="ProgramOfStudy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Enrollment" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="CustomFieldsJSON" type="xsd:string" minOccurs="0"/>
					<xsd:element name="InstructorList" type="tns:InstructorList"/>
					<xsd:element name="RoomName" type="xsd:string" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ModuleCourseList">
				<xsd:sequence>
					<xsd:element name="ModuleCourses" type="tns:ModuleCourse" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Module">
				<xsd:sequence>
					<xsd:element name="ModuleUid" type="xsd:string"/>
					<xsd:element name="ModuleName" type="xsd:string"/>
					<xsd:element name="ModuleCode" type="xsd:string"/>
					<xsd:element name="ModuleProgramOfStudy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ModuleEnrollment" type="xsd:int" nillable="true" minOccurs="0"/>
					<xsd:element name="CustomFieldsJSON" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ModulePeriodId" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ModulePeriodIdType" type="tns:PeriodIdType" minOccurs="0"/>
					<xsd:element name="ModuleCourseList" type="tns:ModuleCourseList"/>
					<xsd:element name="InstructorList" type="tns:InstructorList"/>
					<xsd:element name="RoomName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SubunitName" type="xsd:string"/>
					<xsd:element name="ParticipantList" type="tns:PersonList" minOccurs="0"/>
					<xsd:element name="AnonymousParticipants" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="ModuleSurveyCreatorList" type="tns:ModuleSurveyCreatorList" minOccurs="0"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ModuleList">
				<xsd:sequence>
					<xsd:element name="Modules" type="tns:Module" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="UserSession">
				<xsd:sequence>
					<xsd:element name="SessionId" type="xsd:string"/>
					<xsd:element name="ServerIp" type="xsd:string"/>
					<xsd:element name="UserStartPage" type="xsd:string"/>
					<xsd:element name="Token" type="xsd:string"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CourseType">
				<xsd:all>
					<xsd:element name="m_nCourseTypeId" type="xsd:int" nillable="true"/>
					<xsd:element name="m_sName" type="xsd:string"/>
					<xsd:element name="m_nModuleFrmId" type="xsd:int" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="CourseTypeList">
				<xsd:sequence>
					<xsd:element name="CourseTypes" type="tns:CourseType" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VolumeLicense">
				<xsd:all>
					<xsd:element name="LicenseId" type="xsd:int"/>
					<xsd:element name="LicenseVolume" type="xsd:int"/>
					<xsd:element name="LicenseCycles" type="xsd:int"/>
					<xsd:element name="LicenseStartDate" type="xsd:string"/>
					<xsd:element name="LicenseEndDate" type="xsd:string"/>
					<xsd:element name="LicenseActivityStatus" type="xsd:boolean"/>
					<xsd:element name="UsedLicenseCycles" type="xsd:int"/>
					<xsd:element name="UsedLicenseVolume" type="xsd:float"/>
					<xsd:element name="LicenseKey" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="VolumeLicenseList">
				<xsd:sequence>
					<xsd:element name="VolumeLicenses" type="tns:VolumeLicense" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="WebscanBatch">
				<xsd:all>
					<xsd:element name="m_nReaderBatchId" type="xsd:int"/>
					<xsd:element name="m_nBatchId" type="xsd:int"/>
					<xsd:element name="m_nStatus" type="xsd:int"/>
					<xsd:element name="m_sText" type="xsd:string"/>
					<xsd:element name="m_nProceedActionValue" type="xsd:int"/>
					<xsd:element name="m_sProceedAction" type="xsd:string"/>
					<xsd:element name="m_nCancelActionValue" type="xsd:int"/>
					<xsd:element name="m_sCancelAction" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="WebscanBatchList">
				<xsd:sequence>
					<xsd:element name="WebscanBatch" type="tns:WebscanBatch" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:element name="tSoapfault">
				<xsd:complexType>
					<xsd:all>
						<xsd:element name="sErrorCode" type="xsd:string"/>
						<xsd:element name="sErrorMessage" type="xsd:string"/>
						<xsd:element name="sDetails" type="xsd:string"/>
					</xsd:all>
				</xsd:complexType>
			</xsd:element>
			<xsd:complexType name="SurveyParams">
				<xsd:all>
					<xsd:element name="Name" type="xsd:string"/>
					<xsd:element name="Subunits" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Instructors" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Periods" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Forms" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="CourseTypes" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Courses" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="ProgramOfStudies" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Statuses" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Types" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="OpenState" type="xsd:int" minOccurs="0"/>
					<xsd:element name="Limit" type="xsd:int" minOccurs="0"/>
					<xsd:element name="OrderBy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="OrderByDirection" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ExtendedResponseAsJSON" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="CreationDateFrom" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CreationDateTo" type="xsd:string" minOccurs="0"/>
					<xsd:element name="LastChangeDateFrom" type="xsd:string" minOccurs="0"/>
					<xsd:element name="LastChangeDateTo" type="xsd:string" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FilterSet">
				<xsd:all>
					<xsd:element name="TriggerItemId" type="xsd:int"/>
					<xsd:element name="Action" type="xsd:int"/>
					<xsd:element name="TargetItems" type="tns:IDList"/>
					<xsd:element name="TriggerValues" type="tns:ValueList" minOccurs="0"/>
					<xsd:element name="IsInitialFilterSet" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="Operator" type="xsd:int" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FilterSetList">
				<xsd:sequence>
					<xsd:element name="FilterSet" type="tns:FilterSet" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Mail">
				<xsd:all>
					<xsd:element name="FromMail" type="xsd:string"/>
					<xsd:element name="FromName" type="xsd:string"/>
					<xsd:element name="ToList" type="tns:MailAddressList"/>
					<xsd:element name="Subject" type="xsd:string"/>
					<xsd:element name="Body" type="xsd:string"/>
					<xsd:element name="DeliveryType" type="xsd:int"/>
					<xsd:element name="CcList" type="tns:MailAddressList" minOccurs="0"/>
					<xsd:element name="BccList" type="tns:MailAddressList" minOccurs="0"/>
					<xsd:element name="ScheduledDate" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Status" type="xsd:int" minOccurs="0"/>
					<xsd:element name="SurveyID" type="xsd:int" minOccurs="0"/>
					<xsd:element name="CreationDate" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ID" type="xsd:int" minOccurs="0"/>
					<xsd:element name="Errors" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="AttachmentPaths" type="tns:StringList" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="MailList">
				<xsd:sequence>
					<xsd:element name="Mail" type="tns:Mail" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="MailAddressList">
				<xsd:sequence>
					<xsd:element name="MailAddress" type="xsd:string" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="MailSummary">
				<xsd:all>
					<xsd:element name="PendingMails" type="tns:IDList"/>
					<xsd:element name="PendingSchedulerMailsCount" type="xsd:int"/>
					<xsd:element name="DeliveredMails" type="tns:IDList"/>
					<xsd:element name="UndeliveredMails" type="tns:IDList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="VerifierSurvey">
				<xsd:all>
					<xsd:element name="SurveyId" type="xsd:int"/>
					<xsd:element name="VerifierBatchs" type="tns:VerifierBatchList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="VerifierBatchList">
				<xsd:sequence>
					<xsd:element name="VerifierBatch" type="tns:VerifierBatch" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VerifierBatch">
				<xsd:all>
					<xsd:element name="BatchId" type="xsd:int"/>
					<xsd:element name="PageCount" type="xsd:int"/>
					<xsd:element name="NonFormsCount" type="xsd:int"/>
					<xsd:element name="UnlocatedAnswers" type="xsd:int"/>
					<xsd:element name="Scanstation" type="xsd:string"/>
					<xsd:element name="VerifierSheets" type="tns:VerifierSheetList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="VerifierSheetList">
				<xsd:sequence>
					<xsd:element name="VerifierSheet" type="tns:VerifierSheet" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VerifierSheet">
				<xsd:all>
					<xsd:element name="SheetId" type="xsd:int"/>
					<xsd:element name="BatchId" type="xsd:int"/>
					<xsd:element name="SheetNumberInBatch" type="xsd:int"/>
					<xsd:element name="SurveyId" type="xsd:int"/>
					<xsd:element name="FormId" type="xsd:int"/>
					<xsd:element name="PageId" type="xsd:int"/>
					<xsd:element name="SerialNumber" type="xsd:int"/>
					<xsd:element name="SerialNumberCounter" type="xsd:int"/>
					<xsd:element name="ParticipantEmail" type="xsd:string"/>
					<xsd:element name="ParticipantIdentifier" type="xsd:string"/>
					<xsd:element name="CoverSheet" type="xsd:boolean"/>
					<xsd:element name="NonFormType" type="xsd:int"/>
					<xsd:element name="SheetImage" type="xsd:string"/>
					<xsd:element name="VerifierQuestions" type="tns:VerifierQuestionList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="VerifierQuestionList">
				<xsd:sequence>
					<xsd:element name="VerifierQuestion" type="tns:VerifierQuestion" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VerifierQuestion">
				<xsd:all>
					<xsd:element name="QuestionId" type="xsd:int"/>
					<xsd:element name="SheetId" type="xsd:int"/>
					<xsd:element name="QuestionType" type="xsd:int"/>
					<xsd:element name="QuestionPosition" type="xsd:int"/>
					<xsd:element name="DataType" type="xsd:string"/>
					<xsd:element name="QuestionCoord" type="tns:Coord"/>
					<xsd:element name="VerifierQuestionAnswers" type="tns:VerifierQuestionAnswerList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="VerifierQuestionAnswerList">
				<xsd:sequence>
					<xsd:element name="VerifierQuestionAnswer" type="tns:VerifierQuestionAnswer" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="VerifierQuestionAnswer">
				<xsd:all>
					<xsd:element name="AnswerOptionValue" type="xsd:string"/>
					<xsd:element name="AnswerOptionFillingGrade" type="xsd:float"/>
					<xsd:element name="AnswerPosition" type="xsd:int"/>
					<xsd:element name="x" type="xsd:int"/>
					<xsd:element name="y" type="xsd:int"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="UserSessionInfo">
				<xsd:all>
					<xsd:element name="UserId" type="xsd:int"/>
					<xsd:element name="UserType" type="xsd:int"/>
					<xsd:element name="SubunitId" type="xsd:int"/>
					<xsd:element name="IsAdmin" type="xsd:boolean"/>
					<xsd:element name="IsSubunitAdmin" type="xsd:boolean"/>
					<xsd:element name="PenultimateLogin" type="xsd:dateTime"/>
					<xsd:element name="SessionStart" type="xsd:dateTime"/>
					<xsd:element name="SessionLastChange" type="xsd:dateTime"/>
					<xsd:element name="SessionRemainingSeconds" type="xsd:int"/>
					<xsd:element name="Token" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="UsageRestrictionList">
				<xsd:all>
					<xsd:element name="Subunits" type="tns:IDList" minOccurs="0"/>
					<xsd:element name="CourseTypes" type="tns:IDList" minOccurs="0"/>
					<xsd:element name="Periods" type="tns:IDList" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="SurveySummary">
				<xsd:all>
					<xsd:element name="SurveyId" type="xsd:int"/>
					<xsd:element name="SurveyName" type="xsd:string"/>
					<xsd:element name="SurveyCourseCode" type="xsd:string"/>
					<xsd:element name="SubunitName" type="xsd:string"/>
					<xsd:element name="SurveyInstructorName" type="xsd:string"/>
					<xsd:element name="SurveyType" type="xsd:string"/>
					<xsd:element name="SurveyIsAnonymous" type="xsd:boolean"/>
					<xsd:element name="SurveyStatus" type="xsd:int"/>
					<xsd:element name="SurveyOpenState" type="xsd:int"/>
					<xsd:element name="SurveyPeriod" type="xsd:string"/>
					<xsd:element name="SurveyCreationDate" type="xsd:dateTime"/>
					<xsd:element name="SurveyScheduledStartDate" type="xsd:dateTime" nillable="true"/>
					<xsd:element name="SurveyScheduledEndDate" type="xsd:dateTime" nillable="true"/>
					<xsd:element name="DirectOnlineLink" type="xsd:string" nillable="true"/>
					<xsd:element name="Participated" type="xsd:boolean"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="SurveySummaryList">
				<xsd:sequence>
					<xsd:element name="SurveySummary" type="tns:SurveySummary" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="PDFReportDefinitionList">
				<xsd:sequence>
					<xsd:element name="PDFReportDefinition" type="tns:PDFReportDefinition" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="PDFReportDefinition">
				<xsd:all>
					<xsd:element name="ReportDefinitionId" type="xsd:int"/>
					<xsd:element name="Name" type="xsd:string"/>
					<xsd:element name="Description" type="xsd:string"/>
					<xsd:element name="BaseFormId" type="xsd:int"/>
					<xsd:element name="Questions" type="tns:IDList"/>
					<xsd:element name="Recipients" type="tns:IDList"/>
					<xsd:element name="BaseReportId" type="xsd:int"/>
					<xsd:element name="SubgroupQuestion" type="xsd:int" nillable="true"/>
					<xsd:element name="SubgroupShowOverallReport" type="xsd:boolean" nillable="true"/>
					<xsd:element name="SubgroupShowDivider" type="xsd:boolean" nillable="true"/>
					<xsd:element name="SubgroupIncludeOpenQuestions" type="xsd:boolean" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="GroupTranslationList">
				<xsd:sequence>
					<xsd:element name="GroupTranslation" type="tns:GroupTranslation" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="GroupTranslation">
				<xsd:all>
					<xsd:element name="GroupId" type="xsd:int"/>
					<xsd:element name="GroupTitle" type="xsd:string"/>
					<xsd:element name="GroupDescription" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ItemTranslationList">
				<xsd:sequence>
					<xsd:element name="ItemTranslation" type="tns:ItemTranslation" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="ItemTranslation">
				<xsd:all>
					<xsd:element name="ItemId" type="xsd:int"/>
					<xsd:element name="ItemText" type="xsd:string"/>
					<xsd:element name="Left" type="xsd:string"/>
					<xsd:element name="Right" type="xsd:string"/>
					<xsd:element name="Abstention" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FormTranslationList">
				<xsd:sequence>
					<xsd:element name="FormTranslation" type="tns:FormTranslation" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="FormTranslation">
				<xsd:all>
					<xsd:element name="FormTranslationId" type="xsd:int"/>
					<xsd:element name="FormId" type="xsd:int"/>
					<xsd:element name="Name" type="xsd:string"/>
					<xsd:element name="Abbreviation" type="xsd:string"/>
					<xsd:element name="PDFFilename" type="xsd:string"/>
					<xsd:element name="LogoFile" type="xsd:string"/>
					<xsd:element name="SystemLanguage" type="xsd:int"/>
					<xsd:element name="SystemLanguageAbbreviation" type="xsd:string"/>
					<xsd:element name="LanguageSet" type="xsd:int"/>
					<xsd:element name="IsEnabled" type="xsd:boolean"/>
					<xsd:element name="GroupTranslations" type="tns:GroupTranslationList"/>
					<xsd:element name="ItemTranslations" type="tns:ItemTranslationList"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="TextTemplateList">
				<xsd:sequence>
					<xsd:element name="TextTemplate" type="tns:TextTemplate" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="TextTemplate">
				<xsd:all>
					<xsd:element name="Id" type="xsd:string"/>
					<xsd:element name="SystemLanguage" type="xsd:string"/>
					<xsd:element name="SystemLanguageAbbreviation" type="xsd:string"/>
					<xsd:element name="Type" type="xsd:string"/>
					<xsd:element name="FormSpecificText" type="xsd:boolean"/>
					<xsd:element name="Subject" type="xsd:string"/>
					<xsd:element name="Text" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="PwsdSummary">
				<xsd:sequence>
					<xsd:element name="SurveyId" type="xsd:int"/>
					<xsd:element name="Participated" type="xsd:boolean"/>
					<xsd:element name="Person" type="tns:Person" nillable="true"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Folder">
				<xsd:all>
					<xsd:element name="FolderId" type="xsd:int"/>
					<xsd:element name="UserId" type="xsd:int"/>
					<xsd:element name="CreateDate" type="xsd:string" minOccurs="0"/>
					<xsd:element name="FolderName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="DirTypeId" type="xsd:int"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FolderList">
				<xsd:sequence>
					<xsd:element name="Folders" type="tns:Folder" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="IndicatorNameList">
				<xsd:sequence>
					<xsd:element name="IndicatorName" type="tns:IndicatorName" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="IndicatorName">
				<xsd:all>
					<xsd:element name="FormTranslationId" type="xsd:integer" nillable="true"/>
					<xsd:element name="Name" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="IndicatorList">
				<xsd:sequence>
					<xsd:element name="Indicator" type="tns:Indicator" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Indicator">
				<xsd:all>
					<xsd:element name="Position" type="xsd:integer"/>
					<xsd:element name="Names" type="tns:IndicatorNameList"/>
					<xsd:element name="Items" type="tns:IDList"/>
					<xsd:element name="Mean" type="xsd:float" nillable="true"/>
					<xsd:element name="StdDev" type="xsd:float" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="CustomUserSettingsList">
				<xsd:sequence>
					<xsd:element name="CustomUserSetting" type="tns:CustomUserSetting" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="CustomUserSetting">
				<xsd:all>
					<xsd:element name="SettingKey" type="xsd:string"/>
					<xsd:element name="SettingValue" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="NoticeList">
				<xsd:sequence>
					<xsd:element name="Notice" type="tns:Notice" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="Notice">
				<xsd:all>
					<xsd:element name="NoticeId" type="xsd:integer"/>
					<xsd:element name="SurveyId" type="xsd:integer"/>
					<xsd:element name="UserId" type="xsd:integer"/>
					<xsd:element name="Text" type="xsd:string"/>
					<xsd:element name="Date" type="xsd:string"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:simpleType name="FormSearchType">
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="Form"/>
					<xsd:enumeration value="Group"/>
					<xsd:enumeration value="Question"/>
					<xsd:enumeration value="All"/>
					<xsd:enumeration value=""/>
				</xsd:restriction>
			</xsd:simpleType>
			<xsd:complexType name="FormParams">
				<xsd:all>
					<xsd:element name="Users" type="tns:StringList"/>
					<xsd:element name="SearchQuery" type="xsd:string" minOccurs="0"/>
					<xsd:element name="IncludeFormsOfOtherSubunitAdministrators" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="OrderBy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="OrderByDirection" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Limit" type="xsd:integer" minOccurs="0"/>
					<xsd:element name="IncludeDeactivatedForms" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="ExcludeActiveForms" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="IncludeChildForms" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="FolderId" type="xsd:integer" minOccurs="0"/>
					<xsd:element name="SelectFields" type="tns:FormSelectFieldList" minOccurs="0"/>
					<xsd:element name="FormSearchType" type="tns:FormSearchType" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="UserParams">
				<xsd:all>
					<xsd:element name="UserIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Types" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="LoginName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ExternalID" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Title" type="xsd:string" minOccurs="0"/>
					<xsd:element name="FirstName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="SurName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="UnitName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Email" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Subunits" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="ActiveUsers" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Limit" type="xsd:int" minOccurs="0"/>
					<xsd:element name="OrderBy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="OrderByDirection" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ExtendedResponseAsJSON" type="xsd:boolean" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="CourseParams">
				<xsd:all>
					<xsd:element name="Name" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CourseIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Instructors" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Subunits" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Periods" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="CourseTypes" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="ProgramOfStudies" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CourseCode" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Room" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ExternalID" type="xsd:string" minOccurs="0"/>
					<xsd:element name="CustomFieldEntry" type="xsd:string" minOccurs="0"/>
					<xsd:element name="Limit" type="xsd:int" minOccurs="0"/>
					<xsd:element name="OrderBy" type="xsd:string" minOccurs="0"/>
					<xsd:element name="OrderByDirection" type="xsd:string" minOccurs="0"/>
					<xsd:element name="ExtendedResponseAsJSON" type="xsd:boolean" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ReaderScanBatchParams">
				<xsd:all>
					<xsd:element name="SurveyIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="BatchIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="DateTimeStart" type="xsd:dateTime" minOccurs="0"/>
					<xsd:element name="DateTimeEnd" type="xsd:dateTime" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="ParticipationTrackingParams">
				<xsd:all>
					<xsd:element name="SubunitIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="SurveyIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="PeriodIds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="SurveyTypes" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="SurveyOpenStates" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="Pswds" type="tns:StringList" minOccurs="0"/>
					<xsd:element name="ParticipantAddresses" type="tns:StringList" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FormMainLanguage">
				<xsd:all>
					<xsd:element name="FormId" type="xsd:int" />
					<xsd:element name="Name" type="xsd:string" />
					<xsd:element name="PDFFilename" type="xsd:string" />
					<xsd:element name="LogoFile" type="xsd:string" />
					<xsd:element name="SystemLanguage" type="xsd:int" />
					<xsd:element name="IsEnabled" type="xsd:boolean" />
					<xsd:element name="LanguageSet" type="xsd:int" />
					<xsd:element name="Abbreviation" type="xsd:string" />
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="FormProperties">
				<xsd:all>
					<xsd:element name="FormId" type="xsd:string" />
					<xsd:element name="IdType" type="tns:FormIdType" />
					<xsd:element name="FormName" type="xsd:string" minOccurs="0"/>
					<xsd:element name="FormTitle" type="xsd:string" minOccurs="0"/>
					<xsd:element name="IsActivated" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="IsExtensible" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="ResultAccess" type="xsd:boolean" minOccurs="0"/>
					<xsd:element name="FormProcedure" type="tns:FormProcedure" minOccurs="0"/>
					<xsd:element name="FormSurveyType" type="tns:FormSurveyType" minOccurs="0"/>
					<xsd:element name="FormFolderName" type="xsd:string" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="DatabridgeTemplate">
				<xsd:all>
					<xsd:element name="id" type="xsd:int"/>
					<xsd:element name="name" type="xsd:string"/>
					<xsd:element name="type" type="xsd:string"/>
					<xsd:element name="schedule" type="xsd:string" nillable="true"/>
				</xsd:all>
			</xsd:complexType>
			<xsd:complexType name="DatabridgeTemplateList">
				<xsd:sequence>
					<xsd:element name="DatabridgeTemplates" type="tns:DatabridgeTemplate" minOccurs="0" maxOccurs="unbounded"/>
				</xsd:sequence>
			</xsd:complexType>
			<xsd:complexType name="SoapUsageParams">
				<xsd:all>
					<xsd:element name="TimeFrom" type="xsd:dateTime"/>
					<xsd:element name="UserId" type="xsd:int" minOccurs="0"/>
					<xsd:element name="TimeTo" type="xsd:dateTime" minOccurs="0"/>
				</xsd:all>
			</xsd:complexType>
		</xsd:schema>
	</types>
	<message name="Header">
		<part name="Header" element="tns:Header"/>
	</message>
	<message name="RequestTicketRequest">
		<part name="Login" type="xsd:string"/>
		<part name="Password" type="xsd:string"/>
	</message>
	<message name="RequestTicketResponse">
		<part name="Ticket" type="xsd:string"/>
	</message>
	<message name="GetPswdsByParticipantRequest">
		<part name="UserMailAddress" type="xsd:string"/>
		<part name="CourseCode" type="xsd:string"/>
		<part name="CustomFieldToConsider" type="xsd:integer"/>
	</message>
	<message name="GetPswdsByParticipantResponse">
		<part name="OnlineSurveyKeys" type="tns:OnlineSurveyKeyList"/>
	</message>
	<message name="DeleteUnusedPswdsRequest">
		<part name="ObjectList" type="tns:OnlineCodeList"/>
	</message>
	<message name="DeleteUnusedPswdsResponse">
		<part name="ObjectList" type="tns:OnlineCodeList"/>
	</message>
	<message name="GetUserRequest">
		<part name="UserId" type="xsd:string"/>
		<part name="IdType" type="tns:UserIdType"/>
		<part name="IncludeCourses" type="xsd:boolean"/>
		<part name="IncludeSurveys" type="xsd:boolean"/>
		<part name="IncludeParticipants" type="xsd:boolean"/>
		<part name="IncludeSecondaryCourses" type="xsd:boolean"/>
	</message>
	<message name="GetUserResponse">
		<part name="User" type="tns:User"/>
	</message>
	<message name="GetUsersBySubunitRequest">
		<part name="nSubunitId" type="xsd:int"/>
		<part name="IncludeCourses" type="xsd:boolean"/>
		<part name="IncludeSurveys" type="xsd:boolean"/>
		<part name="IncludeParticipants" type="xsd:boolean"/>
		<part name="IncludeSecondaryCourses" type="xsd:boolean"/>
	</message>
	<message name="GetUsersBySubunitResponse">
		<part name="UserList" type="tns:UserList"/>
	</message>
	<message name="GetAllPeriodsRequest">
	</message>
	<message name="GetAllPeriodsResponse">
		<part name="PeriodList" type="tns:PeriodList"/>
	</message>
	<message name="UpdateUserRequest">
		<part name="User" type="tns:User"/>
	</message>
	<message name="UpdateUserResponse">
		<part name="User" type="tns:User"/>
	</message>
	<message name="GetCoursesByUserIdRequest">
		<part name="nUserId" type="xsd:int"/>
	</message>
	<message name="GetCoursesByUserIdResponse">
		<part name="CourseList" type="tns:CourseList"/>
	</message>
	<message name="InsertCourseRequest">
		<part name="oCourse" type="tns:Course"/>
	</message>
	<message name="InsertCourseResponse">
		<part name="Course" type="tns:Course"/>
	</message>
	<message name="UpdateCourseRequest">
		<part name="Course" type="tns:Course"/>
		<part name="DeleteExistingParticipants" type="xsd:boolean"/>
	</message>
	<message name="UpdateCourseResponse">
		<part name="Course" type="tns:Course"/>
	</message>
	<message name="GetPeriodRequest">
		<part name="sPeriodId" type="xsd:string"/>
		<part name="sPeriodIdType" type="tns:PeriodIdType"/>
	</message>
	<message name="GetPeriodResponse">
		<part name="Period" type="tns:Period"/>
	</message>
	<message name="GetAllFormsRequest">
		<part name="IncludeCustomReports" type="xsd:boolean"/>
		<part name="IncludeUsageRestrictions" type="xsd:boolean"/>
		<part name="UsageRestrictionList" type="tns:UsageRestrictionList"/>
	</message>
	<message name="GetAllFormsResponse">
		<part name="FormList" type="tns:SimpleFormList"/>
	</message>
	<message name="GetSurveyTypesRequest">
	</message>
	<message name="GetSurveyTypesResponse">
		<part name="SurveyTypeList" type="tns:SurveyTypeList"/>
	</message>
	<message name="GetFormByCourseIdAndPeriodIdRequest">
		<part name="nCourseId" type="xsd:int"/>
		<part name="nPeriodId" type="xsd:int"/>
	</message>
	<message name="GetFormByCourseIdAndPeriodIdResponse">
		<part name="FormList" type="tns:SimpleFormList"/>
	</message>
	<message name="GetFormRequest">
		<part name="FormId" type="xsd:string"/>
		<part name="IdType" type="tns:FormIdType"/>
		<part name="IncludeOnlyQuestions" type="xsd:boolean"/>
		<part name="SkipPoleLabelsInheritance" type="xsd:boolean"/>
	</message>
	<message name="GetFormResponse">
		<part name="VFForm" type="tns:VFForm"/>
	</message>
	<message name="GetSurveyByIdRequest">
		<part name="nSurveyId" type="xsd:int"/>
	</message>
	<message name="GetSurveyByIdResponse">
		<part name="Survey" type="tns:Survey"/>
	</message>
	<message name="GetSurveysByCourseRequest">
		<part name="nCourseId" type="xsd:int"/>
		<part name="nFormId" type="xsd:int"/>
		<part name="nPeriodId" type="xsd:int"/>
	</message>
	<message name="GetSurveysByCourseResponse">
		<part name="SurveyList" type="tns:SurveyList"/>
	</message>
	<message name="UpdateSurveyRequest">
		<part name="oSurvey" type="tns:Survey"/>
	</message>
	<message name="UpdateSurveyResponse">
		<part name="bUpdateSuccess" type="xsd:boolean"/>
	</message>
	<message name="CloseSurveyRequest">
		<part name="nSurveyId" type="xsd:int"/>
	</message>
	<message name="CloseSurveyResponse">
		<part name="bUpdateSuccess" type="xsd:boolean"/>
	</message>
	<message name="OpenSurveyRequest">
		<part name="nSurveyId" type="xsd:int"/>
	</message>
	<message name="OpenSurveyResponse">
		<part name="bUpdateSuccess" type="xsd:boolean"/>
	</message>
	<message name="GetPswdsBySurveyRequest">
		<part name="nSurveyId" type="xsd:int"/>
		<part name="nPswdCount" type="xsd:int"/>
		<part name="nCodeTypes" type="xsd:int"/>
		<part name="bForceNewPasswordGeneration" type="xsd:boolean"/>
		<part name="bSetPswdsToSent" type="xsd:boolean"/>
	</message>
	<message name="GetPswdsBySurveyResponse">
		<part name="ObjectList" type="tns:OnlineCodeList"/>
	</message>
	<message name="IsPswdUnusedRequest">
		<part name="sPSWD" type="xsd:string"/>
	</message>
	<message name="IsPswdUnusedResponse">
		<part name="bPswdIsUnused" type="xsd:boolean"/>
	</message>
	<message name="InsertCentralSurveyRequest">
		<part name="nUserId" type="xsd:int"/>
		<part name="nCourseId" type="xsd:int"/>
		<part name="nFormId" type="xsd:int"/>
		<part name="nPeriodId" type="xsd:int"/>
		<part name="sSurveyType" type="xsd:string"/>
		<part name="sNotice" type="xsd:string"/>
	</message>
	<message name="InsertCentralSurveyResponse">
		<part name="return" type="tns:Survey"/>
	</message>
	<message name="SetupCentralSurveyRequest">
		<part name="oUser" type="tns:User"/>
		<part name="oCourse" type="tns:Course"/>
		<part name="oSubunit" type="tns:Unit"/>
		<part name="nFormId" type="xsd:int"/>
		<part name="nPeriodId" type="xsd:int"/>
		<part name="sSurveyType" type="xsd:string"/>
		<part name="sNotice" type="xsd:string"/>
	</message>
	<message name="SetupCentralSurveyResponse">
		<part name="Survey" type="tns:Survey"/>
	</message>
	<message name="GetPDFReportRequest">
		<part name="nSurveyId" type="xsd:int"/>
		<part name="nUserId" type="xsd:int"/>
		<part name="nCustomPDFId" type="xsd:string"/>
		<part name="nLanguageID" type="xsd:int"/>
		<part name="bOnlyClosed" type="xsd:boolean"/>
	</message>
	<message name="GetPDFReportResponse">
		<part name="ReportLink" type="xsd:string"/>
	</message>
	<message name="GetSubunitsRequest">
	</message>
	<message name="GetSubunitsResponse">
		<part name="UnitList" type="tns:UnitList"/>
	</message>
	<message name="GetSubunitRequest">
		<part name="SubunitId" type="xsd:string"/>
		<part name="IdType" type="tns:SubunitIdType"/>
		<part name="IncludeInstructors" type="xsd:boolean"/>
	</message>
	<message name="GetSubunitResponse">
		<part name="Unit" type="tns:Unit"/>
	</message>
	<message name="InsertUserRequest">
		<part name="User" type="tns:User"/>
	</message>
	<message name="InsertUserResponse">
		<part name="User" type="tns:User"/>
	</message>
	<message name="InsertSubunitRequest">
		<part name="Unit" type="tns:Unit"/>
	</message>
	<message name="InsertSubunitResponse">
		<part name="Unit" type="tns:Unit"/>
	</message>
	<message name="InsertCoursesRequest">
		<part name="CourseCreatorList" type="tns:CourseCreatorList"/>
		<part name="DeleteExistingParticipants" type="xsd:boolean"/>
	</message>
	<message name="InsertCoursesResponse">
		<part name="UploadStatusList" type="tns:UploadStatusList"/>
	</message>
	<message name="GetPDFPluginsByFormIdRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="UserId" type="xsd:int"/>
	</message>
	<message name="GetPDFPluginsByFormIdResponse">
		<part name="PDFPluginList" type="tns:PDFPluginList"/>
	</message>
	<message name="GetPDFQuestionnaireRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="SurveyId" type="xsd:int"/>
		<part name="SerialPrint" type="xsd:boolean"/>
		<part name="Additionalcopies" type="xsd:boolean"/>
		<part name="SerialNumberFrom" type="xsd:int"/>
		<part name="SerialNumberTo" type="xsd:int"/>
	</message>
	<message name="GetPDFQuestionnaireResponse">
		<part name="HyperLink" type="xsd:string"/>
	</message>
	<message name="GetPDFCoversheetRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetPDFCoversheetResponse">
		<part name="HyperLink" type="xsd:string"/>
	</message>
	<message name="GetPDFPswdRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetPDFPswdResponse">
		<part name="HyperLink" type="xsd:string"/>
	</message>
	<message name="GetCSVRawDataRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetCSVRawDataResponse">
		<part name="HyperLink" type="xsd:string"/>
	</message>
	<message name="GetSPSSRawDataRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetSPSSRawDataResponse">
		<part name="HyperLink" type="xsd:string"/>
	</message>
	<message name="GetCourseRequest">
		<part name="CourseId" type="xsd:string"/>
		<part name="IdType" type="tns:CourseIdType"/>
		<part name="IncludeSurveys" type="xsd:boolean"/>
		<part name="IncludeParticipants" type="xsd:boolean"/>
	</message>
	<message name="GetCourseResponse">
		<part name="Course" type="tns:Course"/>
	</message>
	<message name="DeleteUserRequest">
		<part name="UserId" type="xsd:string"/>
		<part name="IdType" type="tns:UserIdType"/>
	</message>
	<message name="DeleteUserResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="DeleteCourseRequest">
		<part name="CourseId" type="xsd:string"/>
		<part name="IdType" type="tns:CourseIdType"/>
	</message>
	<message name="DeleteCourseResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="DeleteSubunitRequest">
		<part name="SubunitId" type="xsd:string"/>
		<part name="IdType" type="tns:SubunitIdType"/>
	</message>
	<message name="DeleteSubunitResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="DeleteSurveyRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="DeleteSurveyResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="GetSurveyRawDataRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="IncludeOpenEndedQuestions" type="xsd:boolean"/>
		<part name="ResultIDs" type="tns:IDList"/>
	</message>
	<message name="GetSurveyRawDataResponse">
		<part name="SurveyRawData" type="tns:SurveyRawData"/>
	</message>
	<message name="GetSurveyResultsRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetSurveyResultsResponse">
		<part name="SurveyResult" type="tns:SurveyResult"/>
	</message>
	<message name="InsertFormRequest">
		<part name="VFForm" type="tns:VFForm"/>
	</message>
	<message name="InsertFormResponse">
		<part name="VFForm" type="tns:VFForm"/>
	</message>
	<message name="GetOnlineSurveyLinkByEmailRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="EmailAddress" type="xsd:string"/>
		<part name="AddRecipientToSurvey" type="xsd:boolean"/>
		<part name="AutoIncreasePSWDCount" type="xsd:boolean"/>
	</message>
	<message name="GetOnlineSurveyLinkByEmailResponse">
		<part name="OnlineSurveyLink" type="xsd:string"/>
	</message>
	<message name="InsertParticipantsRequest">
		<part name="PersonList" type="tns:PersonList"/>
		<part name="CourseId" type="xsd:string"/>
		<part name="IdType" type="tns:CourseIdType"/>
		<part name="DeleteExisting" type="xsd:boolean"/>
	</message>
	<message name="InsertParticipantsResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="GetCustomReportsByFormRequest">
		<part name="FormId" type="xsd:string"/>
		<part name="IdType" type="tns:FormIdType"/>
	</message>
	<message name="GetCustomReportsByFormResponse">
		<part name="CustomReportList" type="tns:CustomReportList"/>
	</message>
	<message name="GetSimpleFormRequest">
		<part name="FormId" type="xsd:string"/>
		<part name="IdType" type="tns:FormIdType"/>
		<part name="IncludeCustomReports" type="xsd:boolean"/>
		<part name="IncludeUsageRestrictions" type="xsd:boolean"/>
	</message>
	<message name="GetSimpleFormResponse">
		<part name="SimpleForm" type="tns:SimpleForm"/>
	</message>
	<message name="GetVFDRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="IncludeSecondaryData" type="xsd:boolean"/>
	</message>
	<message name="GetVFDResponse">
		<part name="HyperLink" type="xsd:string"/>
	</message>
	<message name="GetSurveyRawDataByTimeRequest">
		<part name="StartTime" type="xsd:dateTime"/>
		<part name="EndTime" type="xsd:dateTime"/>
		<part name="IncludeOpenEndedQuestions" type="xsd:boolean"/>
	</message>
	<message name="GetSurveyRawDataByTimeResponse">
		<part name="SurveyRawDataList" type="tns:SurveyRawDataList"/>
	</message>
	<message name="InsertSurveyNoticeRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="Notice" type="xsd:string"/>
		<part name="UserId" type="xsd:string"/>
		<part name="IdType" type="tns:UserIdType"/>
	</message>
	<message name="InsertSurveyNoticeResponse">
		<part name="Notice" type="tns:Notice"/>
	</message>
	<message name="InsertModulesRequest">
		<part name="ModuleList" type="tns:ModuleList"/>
	</message>
	<message name="InsertModulesResponse">
		<part name="UploadStatusList" type="tns:UploadStatusList"/>
	</message>
	<message name="ActivateOptionalQuestionsForSurveyRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="SendEmail" type="xsd:boolean"/>
		<part name="Mode" type="xsd:int"/>
	</message>
	<message name="ActivateOptionalQuestionsForSurveyResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="ActivateOptionalQuestionsForSurveysRequest">
		<part name="SurveyIDList" type="tns:IDList"/>
		<part name="SendEmail" type="xsd:boolean"/>
		<part name="Mode" type="xsd:int"/>
	</message>
	<message name="ActivateOptionalQuestionsForSurveysResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="ActivateOptionalQuestionsForSurveyAddQuestionsRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="ItemGroupList" type="tns:ItemGroupList"/>
	</message>
	<message name="ActivateOptionalQuestionsForSurveyAddQuestionsResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="ListTasksRequest">
		<part name="SubunitIDList" type="tns:IDList"/>
		<part name="FormIDList" type="tns:IDList"/>
		<part name="SurveyIDList" type="tns:IDList"/>
		<part name="UserIDList" type="tns:IDList"/>
		<part name="TaskTypeIDList" type="tns:IDList"/>
	</message>
	<message name="ListTasksResponse">
		<part name="TaskList" type="tns:TaskList"/>
	</message>
	<message name="InsertInvitationTaskRequest">
		<part name="InvitationTask" type="tns:InvitationTask"/>
		<part name="Participants" type="tns:PersonList"/>
	</message>
	<message name="InsertInvitationTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="InsertRemindTaskRequest">
		<part name="RemindTask" type="tns:RemindTask"/>
	</message>
	<message name="InsertRemindTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="InsertResponseRateTaskRequest">
		<part name="ResponseRateTask" type="tns:ResponseRateTask"/>
	</message>
	<message name="InsertResponseRateTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="InsertCloseTaskRequest">
		<part name="CloseTask" type="tns:CloseTask"/>
	</message>
	<message name="InsertCloseTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="UpdateInvitationTaskRequest">
		<part name="InvitationTask" type="tns:InvitationTask"/>
	</message>
	<message name="UpdateInvitationTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="UpdateRemindTaskRequest">
		<part name="RemindTask" type="tns:RemindTask"/>
	</message>
	<message name="UpdateRemindTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="UpdateResponseRateTaskRequest">
		<part name="ResponseRateTask" type="tns:ResponseRateTask"/>
	</message>
	<message name="UpdateResponseRateTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="UpdateCloseTaskRequest">
		<part name="CloseTask" type="tns:CloseTask"/>
	</message>
	<message name="UpdateCloseTaskResponse">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="DeleteTaskRequest">
		<part name="TaskId" type="xsd:int"/>
	</message>
	<message name="DeleteTaskResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="GetSessionForUserRequest">
		<part name="UserId" type="xsd:string"/>
		<part name="IdType" type="tns:UserIdType"/>
	</message>
	<message name="GetSessionForUserResponse">
		<part name="SessionModel" type="tns:UserSession"/>
	</message>
	<message name="GetCourseTypesRequest">
		<part name="OnlyModuleCourseTypes" type="xsd:boolean"/>
	</message>
	<message name="GetCourseTypesResponse">
		<part name="CourseTypeList" type="tns:CourseTypeList"/>
	</message>
	<message name="CreatePdfReportDefinitionRequest">
		<part name="PDFReportDefinition" type="tns:PDFReportDefinition"/>
		<part name="PDFReportDefinitionCreationMode" type="tns:PDFDefinitionCreationMode"/>
	</message>
	<message name="CreatePdfReportDefinitionResponse">
		<part name="CreatedPdfReportDefinitionId" type="xsd:int"/>
	</message>
	<message name="GetPswdsByRecipientRequest">
		<part name="UserMailAddress" type="xsd:string"/>
	</message>
	<message name="GetPswdsByRecipientResponse">
		<part name="ObjectList" type="tns:OnlineCodeList"/>
	</message>
	<message name="GetPercentOfCompletedSurveysByParticipantRequest">
		<part name="UserMailAddress" type="xsd:string"/>
		<part name="StartDate" type="xsd:string"/>
		<part name="EndDate" type="xsd:string"/>
		<part name="SubunitId" type="xsd:string"/>
		<part name="IdType" type="tns:SubunitIdType"/>
	</message>
	<message name="GetPercentOfCompletedSurveysByParticipantResponse">
		<part name="Percentage" type="xsd:int"/>
	</message>
	<message name="GetAccessibleSubunitsForSubunitAdminRequest">
		<part name="nUserId" type="xsd:int"/>
	</message>
	<message name="GetAccessibleSubunitsForSubunitAdminResponse">
		<part name="UnitList" type="tns:UnitList"/>
	</message>
	<message name="UploadVolumeLicenseRequest">
		<part name="UserId" type="xsd:int"/>
		<part name="LicenseKey" type="xsd:string"/>
	</message>
	<message name="UploadVolumeLicenseResponse">
		<part name="License" type="tns:VolumeLicense"/>
	</message>
	<message name="GetUserVolumeLicensesRequest">
		<part name="UserId" type="xsd:int"/>
	</message>
	<message name="GetUserVolumeLicensesResponse">
		<part name="Licenses" type="tns:VolumeLicenseList"/>
	</message>
	<message name="DeleteVolumeLicenseRequest">
		<part name="UserId" type="xsd:int"/>
		<part name="LicenseId" type="xsd:int"/>
		<part name="LicenseKey" type="xsd:string"/>
	</message>
	<message name="DeleteVolumeLicenseResponse">
		<part name="deleteStatus" type="xsd:boolean"/>
	</message>
	<message name="ReplaceAnswersToOpenQuestionsRequest">
		<part name="SurveyIDList" type="tns:IDList"/>
		<part name="ItemCodeList" type="tns:StringList"/>
		<part name="sReplaceComment" type="xsd:string"/>
	</message>
	<message name="ReplaceAnswersToOpenQuestionsResponse">
		<part name="Success" type="xsd:boolean"/>
	</message>
	<message name="GetSurveyOriginalScansPDFRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="SheetId" type="xsd:int"/>
		<part name="BatchId" type="xsd:int"/>
	</message>
	<message name="GetSurveyOriginalScansPDFResponse">
		<part name="PDFLink" type="xsd:string"/>
	</message>
	<message name="GetWebscanBatchListRequest">
		<part name="UserId" type="xsd:int"/>
		<part name="Language" type="xsd:string"/>
	</message>
	<message name="GetWebscanBatchListResponse">
		<part name="WebscanBatchList" type="tns:WebscanBatchList"/>
	</message>
	<message name="ApplyActionOnWebscanBatchRequest">
		<part name="BatchId" type="xsd:int"/>
		<part name="Action" type="xsd:int"/>
	</message>
	<message name="ApplyActionOnWebscanBatchResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="SoapfaultMessage">
		<part name="return" element="tns:tSoapfault"/>
	</message>
	<message name="SetFormActivationStatusRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="ActivationStatus" type="xsd:boolean"/>
	</message>
	<message name="SetFormActivationStatusResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="InsertCourseTypeRequest">
		<part name="Name" type="xsd:string"/>
		<part name="ModuleFormId" type="xsd:int"/>
		<part name="AddConnectionToForms" type="xsd:boolean"/>
	</message>
	<message name="InsertCourseTypeResponse">
		<part name="CourseType" type="tns:CourseType"/>
	</message>
	<message name="ResetSurveyRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="ResetSurveyResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="PrefillDataIntoOnlineSurveyRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="FieldValueList" type="tns:KeyValueList"/>
		<part name="PSWDList" type="tns:StringList"/>
	</message>
	<message name="PrefillDataIntoOnlineSurveyResponse">
		<part name="PSWDsCount" type="xsd:int"/>
	</message>
	<message name="GetSurveyIDsByParamsRequest">
		<part name="Params" type="tns:SurveyParams"/>
	</message>
	<message name="GetSurveyIDsByParamsResponse">
		<part name="SurveyIds" type="tns:StringList"/>
	</message>
	<message name="AssignVolumeToSubunitRequest">
		<part name="SubunitId" type="xsd:int"/>
		<part name="Volume" type="xsd:int"/>
	</message>
	<message name="AssignVolumeToSubunitResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="DeleteFormRequest">
		<part name="FormId" type="xsd:int"/>
	</message>
	<message name="DeleteFormResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="UpdateCourseTypeRequest">
		<part name="CourseTypeId" type="xsd:int"/>
		<part name="Name" type="xsd:string"/>
		<part name="ModuleFormId" type="xsd:int"/>
		<part name="AddConnectionToForms" type="xsd:boolean"/>
	</message>
	<message name="UpdateCourseTypeResponse">
		<part name="CourseType" type="tns:CourseType"/>
	</message>
	<message name="DeleteCourseTypeRequest">
		<part name="CourseTypeId" type="xsd:int"/>
	</message>
	<message name="DeleteCourseTypeResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="GetFiltersByFormIdRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetFiltersByFormIdResponse">
		<part name="FilterSets" type="tns:FilterSetList"/>
	</message>
	<message name="SetFiltersForFormRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="SurveyId" type="xsd:int"/>
		<part name="FilterSets" type="tns:FilterSetList"/>
	</message>
	<message name="SetFiltersForFormResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="DeleteFiltersByFormIdRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="DeleteFiltersByFormIdResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="AddEMailsToQueueRequest">
		<part name="Mails" type="tns:MailList"/>
	</message>
	<message name="AddEMailsToQueueResponse">
		<part name="Mails" type="tns:MailList"/>
	</message>
	<message name="GetEMailsByIDListRequest">
		<part name="MailIDList" type="tns:IDList"/>
		<part name="Status" type="xsd:int"/>
	</message>
	<message name="GetEMailsByIDListResponse">
		<part name="Mails" type="tns:MailList"/>
	</message>
	<message name="GetEMailSummaryByCreationDateRequest">
		<part name="CreationDate" type="xsd:string"/>
	</message>
	<message name="GetEMailSummaryByCreationDateResponse">
		<part name="Summary" type="tns:MailSummary"/>
	</message>
	<message name="GetVerifierInfoBySurveyRequest">
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetVerifierInfoBySurveyResponse">
		<part name="VerifierSurvey" type="tns:VerifierSurvey"/>
	</message>
	<message name="GetVerifierInfoBySerialNumberRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="SerialNumber" type="xsd:int"/>
		<part name="SerialNumberCounter" type="xsd:int"/>
	</message>
	<message name="GetVerifierInfoBySerialNumberResponse">
		<part name="VerifierSurvey" type="tns:VerifierSurvey"/>
	</message>
	<message name="GetVerifierInfoByParticipantRequest">
		<part name="SurveyId" type="xsd:int"/>
		<part name="ParticipantIdentifier" type="xsd:string"/>
	</message>
	<message name="GetVerifierInfoByParticipantResponse">
		<part name="VerifierSurvey" type="tns:VerifierSurvey"/>
	</message>
	<message name="GetVerifierInfoByBatchRequest">
		<part name="BatchId" type="xsd:int"/>
		<part name="BatchIdType" type="tns:BatchIdType"/>
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetVerifierInfoByBatchResponse">
		<part name="VerifierBatch" type="tns:VerifierBatch"/>
	</message>
	<message name="GetUserSessionInfoRequest">
		<part name="SessionId" type="xsd:string"/>
		<part name="ResumeSession" type="xsd:boolean"/>
	</message>
	<message name="GetUserSessionInfoResponse">
		<part name="UserSessionInfo" type="tns:UserSessionInfo"/>
	</message>
	<message name="GetConfigurationInfoRequest">
		<part name="UserId" type="xsd:int"/>
	</message>
	<message name="GetConfigurationInfoResponse">
		<part name="ConfigurationInfo" type="tns:KeyValueList"/>
	</message>
	<message name="DeleteFormsRequest">
		<part name="FormIDList" type="tns:IDList"/>
	</message>
	<message name="DeleteFormsResponse">
		<part name="FormsDeletionInfo" type="tns:KeyValueList"/>
	</message>
	<message name="GetUserByLoginRequest">
		<part name="Login" type="xsd:string"/>
		<part name="Password" type="xsd:string"/>
	</message>
	<message name="GetUserByLoginResponse">
		<part name="User" type="tns:User"/>
	</message>
	<message name="GetEvaluationSummaryByParticipantRequest">
		<part name="ParticipantMailAddress" type="xsd:string"/>
		<part name="SurveyTypes" type="xsd:string"/>
		<part name="SurveyOpenState" type="xsd:int"/>
	</message>
	<message name="GetEvaluationSummaryByParticipantResponse">
		<part name="SurveySummaryList" type="tns:SurveySummaryList"/>
	</message>
	<message name="GetPdfReportDefinitionRequest">
		<part name="PDFReportDefinitionId" type="xsd:int"/>
	</message>
	<message name="GetPdfReportDefinitionResponse">
		<part name="PDFReportDefinition" type="tns:PDFReportDefinition"/>
	</message>
	<message name="GetPdfReportDefinitionsByFormIdRequest">
		<part name="FormId" type="xsd:int"/>
	</message>
	<message name="GetPdfReportDefinitionsByFormIdResponse">
		<part name="PDFReportDefinitionList" type="tns:PDFReportDefinitionList"/>
	</message>
	<message name="GetFormTranslationsRequest">
		<part name="FormId" type="xsd:int"/>
	</message>
	<message name="GetFormTranslationsResponse">
		<part name="FormTranslationList" type="tns:FormTranslationList"/>
	</message>
	<message name="GetUserByIdConsiderExternalIDRequest">
		<part name="UserId" type="xsd:string"/>
		<part name="IdType" type="tns:UserIdType"/>
		<part name="IncludeCourses" type="xsd:boolean"/>
		<part name="IncludeSurveys" type="xsd:boolean"/>
		<part name="IncludeParticipants" type="xsd:boolean"/>
		<part name="IncludeSecondaryCourses" type="xsd:boolean"/>
	</message>
	<message name="GetUserByIdConsiderExternalIDResponse">
		<part name="User" type="tns:UserList"/>
	</message>
	<message name="GetAllTextTemplateIDsRequest">
	</message>
	<message name="GetAllTextTemplateIDsResponse">
		<part name="TextTemplateIDs" type="tns:StringList"/>
	</message>
	<message name="GetTextTemplateByIdRequest">
		<part name="TextTemplateId" type="xsd:string"/>
		<part name="FormId" type="xsd:int"/>
	</message>
	<message name="GetTextTemplateByIdResponse">
		<part name="TextTemplateList" type="tns:TextTemplateList"/>
	</message>
	<message name="GetPswdSummaryRequest">
		<part name="Pswd" type="xsd:string"/>
	</message>
	<message name="GetPswdSummaryResponse">
		<part name="PwsdSummary" type="tns:PwsdSummary"/>
	</message>
	<message name="GetFoldersByUserIdRequest">
		<part name="UserId" type="xsd:int"/>
	</message>
	<message name="GetFoldersByUserIdResponse">
		<part name="Folders" type="tns:FolderList"/>
	</message>
	<message name="GetAllSurveysByFolderIdRequest">
		<part name="FolderId" type="xsd:int"/>
	</message>
	<message name="GetAllSurveysByFolderIdResponse">
		<part name="SurveyList" type="tns:SurveyList"/>
	</message>
	<message name="GetIndicatorsByFormIdRequest">
		<part name="FormId" type="xsd:int"/>
		<part name="SurveyId" type="xsd:int"/>
	</message>
	<message name="GetIndicatorsByFormIdResponse">
		<part name="IndicatorList" type="tns:IndicatorList"/>
	</message>
	<message name="SaveCustomUserSettingRequest">
		<part name="SettingKey" type="xsd:string"/>
		<part name="SettingValue" type="xsd:string"/>
	</message>
	<message name="SaveCustomUserSettingResponse">
		<part name="ActionResponse" type="xsd:string"/>
	</message>
	<message name="DeleteCustomUserSettingRequest">
		<part name="SettingKey" type="xsd:string"/>
	</message>
	<message name="DeleteCustomUserSettingResponse">
		<part name="ActionResponse" type="xsd:string"/>
	</message>
	<message name="GetCustomUserSettingRequest">
		<part name="SettingKey" type="xsd:string"/>
	</message>
	<message name="GetCustomUserSettingResponse">
		<part name="CustomUserSetting" type="tns:CustomUserSetting"/>
	</message>
	<message name="GetCustomUserSettingsListRequest">
	</message>
	<message name="GetCustomUserSettingsListResponse">
		<part name="CustomUserSettingsList" type="tns:CustomUserSettingsList"/>
	</message>
	<message name="GetSurveyNoticesRequest">
		<part name="SurveyId" type="xsd:integer"/>
	</message>
	<message name="GetSurveyNoticesResponse">
		<part name="NoticeList" type="tns:NoticeList"/>
	</message>
	<message name="UpdateSurveyNoticeRequest">
		<part name="NoticeId" type="xsd:integer"/>
		<part name="Text" type="xsd:string"/>
		<part name="UpdateDate" type="xsd:boolean"/>
	</message>
	<message name="UpdateSurveyNoticeResponse">
		<part name="Notice" type="tns:Notice"/>
	</message>
	<message name="DeleteSurveyNoticeRequest">
		<part name="NoticeId" type="xsd:integer"/>
	</message>
	<message name="DeleteSurveyNoticeResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="InsertSurveyRawDataRequest">
		<part name="SurveyId" type="xsd:integer"/>
		<part name="StartTime" type="xsd:dateTime"/>
		<part name="EndTime" type="xsd:dateTime"/>
		<part name="UseExportValues" type="xsd:boolean"/>
		<part name="SheetResults" type="tns:ItemAnswerListList"/>
	</message>
	<message name="InsertSurveyRawDataResponse">
		<part name="result" type="tns:SurveyStatus"/>
	</message>
	<message name="GetLicenseInformationRequest">
	</message>
	<message name="GetLicenseInformationResponse">
		<part name="LicenseInformation" type="tns:KeyValueList"/>
	</message>
	<message name="GetDatabridgeTemplatesRequest">
	</message>
	<message name="GetDatabridgeTemplatesResponse">
		<part name="TemplateList" type="tns:DatabridgeTemplateList"/>
	</message>

	<message name="TriggerDatabridgeImportRequest">
		<part name="templateId" type="xsd:integer"/>
	</message>
	<message name="TriggerDatabridgeImportResponse">
		<part name="dataUrl" type="xsd:string"/>
	</message>
	<message name="GetFormsInfoByParamsRequest">
		<part name="Params" type="tns:FormParams"/>
	</message>
	<message name="GetFormsInfoByParamsResponse">
		<part name="FormInfos" type="tns:StringList"/>
	</message>
	<message name="SetFormUsageRestrictionsRequest">
		<part name="FormId" type="xsd:integer"/>
		<part name="UsageRestrictionList" type="tns:UsageRestrictionList"/>
	</message>
	<message name="SetFormUsageRestrictionsResponse">
		<part name="UsageRestrictionList" type="tns:UsageRestrictionList"/>
	</message>
	<message name="SendInvitationToParticipantsRequest">
		<part name="SurveyId" type="xsd:integer"/>
		<part name="IsReminder" type="xsd:boolean"/>
		<part name="ProgressIdPrefix" type="xsd:string"/>
	</message>
	<message name="SendInvitationToParticipantsResponse">
		<part name="Result" type="xsd:string"/>
	</message>
	<message name="GetSurveyResponseDistributionRequest">
		<part name="SurveyIDs" type="tns:IDList"/>
		<part name="OnlineResponses" type="xsd:boolean"/>
		<part name="GroupBySurveyId" type="xsd:boolean"/>
		<part name="DataAggregationUnit" type="tns:DateUnit"/>
		<part name="StartTime" type="xsd:dateTime"/>
		<part name="EndTime" type="xsd:dateTime"/>
	</message>
	<message name="GetSurveyResponseDistributionResponse">
		<part name="Result" type="tns:StringList"/>
	</message>
	<message name="MoveSurveyToSubstituteUserRequest">
		<part name="SurveyID" type="xsd:integer"/>
		<part name="SubstituteUserID" type="xsd:integer"/>
		<part name="SendReport" type="xsd:boolean"/>
		<part name="MoveCourse" type="xsd:boolean"/>
	</message>
	<message name="MoveSurveyToSubstituteUserResponse">
		<part name="Result" type="xsd:string"/>
	</message>
	<message name="GetUserIdsByParamsRequest">
		<part name="Params" type="tns:UserParams"/>
	</message>
	<message name="GetUserIdsByParamsResponse">
		<part name="Users" type="tns:StringList"/>
	</message>
	<message name="GetCourseIdsByParamsRequest">
		<part name="Params" type="tns:CourseParams"/>
	</message>
	<message name="GetCourseIdsByParamsResponse">
		<part name="Courses" type="tns:StringList"/>
	</message>
	<message name="MoveUserRequest">
		<part name="UserID" type="xsd:integer"/>
		<part name="TargetSubunitID" type="xsd:integer"/>
		<part name="OverwriteSimilarUser" type="xsd:boolean"/>
	</message>
	<message name="MoveUserResponse">
		<part name="Success" type="xsd:string"/>
	</message>
	<message name="GetReaderScanBatchListRequest">
		<part name="Params" type="tns:ReaderScanBatchParams"/>
	</message>
	<message name="GetReaderScanBatchListResponse">
		<part name="Success" type="tns:StringList"/>
	</message>
	<message name="GetParticipationTrackingListRequest">
		<part name="Params" type="tns:ParticipationTrackingParams"/>
	</message>
	<message name="GetParticipationTrackingListResponse">
		<part name="Success" type="tns:StringList"/>
	</message>
	<message name="GetSurveyResponseRateInformationRequest">
		<part name="Params" type="tns:IDList"/>
	</message>
	<message name="GetSurveyResponseRateInformationResponse">
		<part name="Success" type="tns:StringList"/>
	</message>
	<message name="SetFormTranslationsRequest">
		<part name="FormTranslationList" type="tns:FormTranslationList" />
	</message>
	<message name="SetFormTranslationsResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="SetFormMainLanguageRequest">
		<part name="FormMainLanguage" type="tns:FormMainLanguage" />
	</message>
	<message name="SetFormMainLanguageResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="GetAllAvailableTransactionsByUserLoginRequest">
		<part name="SoapLoginName" type="xsd:string" />
	</message>
	<message name="GetAllAvailableTransactionsByUserLoginResponse">
		<part name="TransactionList" type="tns:KeyValueList"/>
	</message>
	<message name="GetDataBySQLQueryRequest">
		<part name="Query" type="xsd:string" />
	</message>
	<message name="GetDataBySQLQueryResponse">
		<part name="QueryResponse" type="tns:StringList"/>
	</message>
	<message name="SetFormPropertiesRequest">
		<part name="FormProperties" type="tns:FormProperties" />
	</message>
	<message name="SetFormPropertiesResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="SetGlobalConfigurationRequest">
		<part name="ConfigurationInfo" type="tns:KeyValueList" />
	</message>
	<message name="SetGlobalConfigurationResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="SetUserPasswordRequest">
		<part name="Login" type="xsd:string" />
		<part name="Password" type="xsd:string" />
	</message>
	<message name="SetUserPasswordResponse">
		<part name="result" type="xsd:boolean"/>
	</message>
	<message name="GetAllProgramsOfStudyRequest">
		<part name="SubunitIds" type="tns:IDList"/>
	</message>
	<message name="GetAllProgramsOfStudyResponse">
		<part name="ProgramOfStudies" type="tns:StringList"/>
	</message>
	<message name="UpdateGroupTitlesRequest">
		<part name="FormId" type="xsd:string"/>
		<part name="IdType" type="tns:FormIdType"/>
		<part name="ModuleFields" type="tns:KeyValueList"/>
	</message>
	<message name="UpdateGroupTitlesResponse">
		<part name="Response" type="xsd:boolean"/>
	</message>
	<message name="UpdateProfileImageRequest">
		<part name="UserId" type="xsd:int"/>
		<part name="ProfileImagePath" type="xsd:string"/>
	</message>
	<message name="UpdateProfileImageResponse">
		<part name="Response" type="xsd:boolean"/>
	</message>
	<message name="GetEntitiesByKeywordRequest">
		<part name="Keyword" type="xsd:string"/>
		<part name="EntityList" type="tns:EntityList"/>
	</message>
	<message name="GetEntitiesByKeywordResponse">
		<part name="Entities" type="tns:StringList"/>
	</message>
	<message name="GetSoapUsageRequest">
		<part name="SoapUsageParams" type="tns:SoapUsageParams"/>
	</message>
	<message name="GetSoapUsageResponse">
		<part name="Response" type="tns:StringList"/>
	</message>

	<portType name="SoapPort">
		<operation name="RequestTicket">
			<documentation>Gets a ticket string which can be used for further SOAP communication with the web server ("ticket" in the SOAP header). The ticket has a lifetime of 20 minutes and gets invalid if there is no transaction using the ticket. Alternatively it is possible to use the credentials ("login" + "password") directly in the SOAP header.</documentation>
			<input message="tns:RequestTicketRequest"/>
			<output message="tns:RequestTicketResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPswdsByParticipant">
			<documentation>Returns unused online access codes (PSWD) for the shown email address and course ID in the period of the current date. The course ID is optional. If it is empty all courses are considered. Closed surveys are ignored. The participant needs to be assigned to the corresponding course. Optionally, the given value for the user mail address can be matched against a custom field (1-3) of the participant.</documentation>
			<input message="tns:GetPswdsByParticipantRequest"/>
			<output message="tns:GetPswdsByParticipantResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteUnusedPswds">
			<documentation>Deletes the presented passwords from the database and returns a list of the deleted PSWDs. Only unused PSWDs are deleted -> this is why the deleted PSWDs are returned.</documentation>
			<input message="tns:DeleteUnusedPswdsRequest"/>
			<output message="tns:DeleteUnusedPswdsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUser">
			<documentation>Returns user, referenced by his internal user ID, an external ID which was imported previously into the system or a user name. If no user is found, an error is returned. The boolean variables determine if the parent object user will also contain the child objects course, survey and participant.</documentation>
			<input message="tns:GetUserRequest"/>
			<output message="tns:GetUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUsersBySubunit">
			<documentation>Returns all users of the subunit of the type instructor. The boolean variables determine if the parent object user will also contain the child objects course, survey and participant.</documentation>
			<input message="tns:GetUsersBySubunitRequest"/>
			<output message="tns:GetUsersBySubunitResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAllPeriods">
			<documentation>Returns all defined evaluation periods, sorted by date.</documentation>
			<input message="tns:GetAllPeriodsRequest"/>
			<output message="tns:GetAllPeriodsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateUser">
			<documentation>Updates the presented user in the database. Please note: Child objects, like courses, will not be updated by this method. Please use the method "InsertCourses" for mass import/update of course and instructor data.</documentation>
			<input message="tns:UpdateUserRequest"/>
			<output message="tns:UpdateUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCoursesByUserId">
			<documentation>Returns all courses for the specified user (ID). Returns an error, if the user has no courses.</documentation>
			<input message="tns:GetCoursesByUserIdRequest"/>
			<output message="tns:GetCoursesByUserIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCourse">
			<documentation>Returns the course, referenced by the internal course ID, the external ID which was imported previously or the editable course ID. The boolean variables decide if the parent object "Course" also contains the child objects "Survey" and "Participant".</documentation>
			<input message="tns:GetCourseRequest"/>
			<output message="tns:GetCourseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertCourse">
			<documentation>Inserts the presented course into the database. Please note: 1) Child objects of type "Survey" will not be imported by this method. Please use the method "InsertCentralSurvey" for inserting surveys. 2) Child objects of type "Participant" have to be imported accordingly. Please use the method "InsertCentralSurvey" for inserting surveys, too.</documentation>
			<input message="tns:InsertCourseRequest"/>
			<output message="tns:InsertCourseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateCourse">
			<documentation>Updates the presented course in the database. Please note: 1) Child objects of type "Survey" will not be updated by this method. An update of existing surveys is not possible at all. 2) New course participants should be given by the 4th parameter . In order to delete existing participants prior to the import of new participants, the second parameter has to be set to "true". Participants of existing surveys will not be affected by this function.</documentation>
			<input message="tns:UpdateCourseRequest"/>
			<output message="tns:UpdateCourseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPeriod">
			<documentation>Returns a period referenced by its period ID, period name or period date (format YYYY-MM-DD).</documentation>
			<input message="tns:GetPeriodRequest"/>
			<output message="tns:GetPeriodResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAllForms">
			<documentation>Returns all active forms of all users stored in the system. Restrictions can be used to get forms e.g. of specific subunits.</documentation>
			<input message="tns:GetAllFormsRequest"/>
			<output message="tns:GetAllFormsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyTypes">
			<documentation>Survey types are hard-coded single characters and will never be changed. Due to performance reasons, it is not recommended to call this transaction continuously in live systems.</documentation>
			<input message="tns:GetSurveyTypesRequest"/>
			<output message="tns:GetSurveyTypesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetFormByCourseIdAndPeriodId">
			<documentation>Forms can be assigned to specific course types and periods in the system. Use this transaction to get the "approved" forms for a course.</documentation>
			<input message="tns:GetFormByCourseIdAndPeriodIdRequest"/>
			<output message="tns:GetFormByCourseIdAndPeriodIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetForm">
			<documentation>Returns the questionnaire/form referenced by its internal form ID or the questionnaire short name. The objects returned include all question groups and questions. Secondary questionnaire properties such as filter settings are not included. If the parameter "IncludeOnlyQuestions" is true, only questions will be returned and no layout elements like free text, horizontal lines, etc.. If the parameter "SkipPoleLabelsInheritance" is true, scaled questions will not inherit the pole lables of prior (extended) pole labels fields automatically.</documentation>
			<input message="tns:GetFormRequest"/>
			<output message="tns:GetFormResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyById">
			<documentation>Returns the survey referenced by its survey ID.</documentation>
			<input message="tns:GetSurveyByIdRequest"/>
			<output message="tns:GetSurveyByIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveysByCourse">
			<documentation>One course can have more than one survey in different periods or with different forms. To reduce the number of surveys, it is possible to set the parameters for the form and the period. Possible values for m_nState in SurveyList:&lt;br/&gt;0: Ready (waiting for data)&lt;br/&gt;1: Data available&lt;br/&gt;2: Data deleted&lt;br/&gt;4: Quantity of data too low&lt;br/&gt;5: data capturing&lt;br/&gt;6: Verification</documentation>
			<input message="tns:GetSurveysByCourseRequest"/>
			<output message="tns:GetSurveysByCourseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateSurvey">
			<documentation>Updates the displayed survey in the database. Please note: This method has to be used very carefully. Incorrect usage could cause several problems including data loss. Use "OpenSurvey" and "CloseSurvey" instead.</documentation>
			<input message="tns:UpdateSurveyRequest"/>
			<output message="tns:UpdateSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="CloseSurvey">
			<documentation>Closes the survey referenced by its survey ID -> further data collection is not possible for this survey.</documentation>
			<input message="tns:CloseSurveyRequest"/>
			<output message="tns:CloseSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="OpenSurvey">
			<documentation>Opens the survey referenced by its survey ID -> data collection is possible for this survey.</documentation>
			<input message="tns:OpenSurveyRequest"/>
			<output message="tns:OpenSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPswdsBySurvey">
			<documentation>Returns the online access codes (PSWD) for the displayed survey ID encapsulated in a OnlineCode object. If the second parameter is 0, the predefined PSWDs will be returned. Should the number of requested PSWDs exceed the number of existing PSWDs, this method automatically creates new PSWDs by default. All PSWDs are set to "sent" by default.</documentation>
			<input message="tns:GetPswdsBySurveyRequest"/>
			<output message="tns:GetPswdsBySurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="IsPswdUnused">
			<documentation>Checks whether the password shown is unused.</documentation>
			<input message="tns:IsPswdUnusedRequest"/>
			<output message="tns:IsPswdUnusedResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertCentralSurvey">
			<documentation>Creates a new survey for central evaluation based on internal IDs.</documentation>
			<input message="tns:InsertCentralSurveyRequest"/>
			<output message="tns:InsertCentralSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetupCentralSurvey">
			<documentation>Creates a new survey for central evaluation based on given objects. This method also inserts the subunit, user and course objects if they do not already exist.</documentation>
			<input message="tns:SetupCentralSurveyRequest"/>
			<output message="tns:SetupCentralSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPDFReport">
			<documentation>Creates the PDF report for a survey and returns a hyperlink to the document.</documentation>
			<input message="tns:GetPDFReportRequest"/>
			<output message="tns:GetPDFReportResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSubunits">
			<documentation>Gets all subunits which are stored in the database.</documentation>
			<input message="tns:GetSubunitsRequest"/>
			<output message="tns:GetSubunitsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSubunit">
			<documentation>Gets a subunit by the name presented. Note: In the system it is possible to have two or more subunits with the same name, but in this function, we only return the first. The boolean variable determines whether the parent object "subunit" will also contain child objects of the type "user".</documentation>
			<input message="tns:GetSubunitRequest"/>
			<output message="tns:GetSubunitResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertUser">
			<documentation>Inserts the user shown into the database. Please note: Child objects like courses will not be inserted by this method. Please use the method "InsertCourses" in order to mass import/update course and instructor data.</documentation>
			<input message="tns:InsertUserRequest"/>
			<output message="tns:InsertUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertSubunit">
			<documentation>Inserts the presented subunit into the database. Please note: Child objects of type "User" will not be inserted by this method. Please use the method "InsertCourses" for mass import of course and instructor data.</documentation>
			<input message="tns:InsertSubunitRequest"/>
			<output message="tns:InsertSubunitResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertCourses">
			<documentation>Transaction for mass structure data uploads. The transaction determines whether the presented courses and instructors already exist in the system and performs an INSERT or UPDATE operation. This method provides the opportunity to upload multiple instructors (first instructor will be setup as main instructor) as well as a list of course participants. Since V5.0 this method includes the following sub-functions: -	Create surveys -	Configure scheduled tasks for online surveys -	Send email with PDF questionnaire to defined email address -	Send email invitation for online surveys to given participants</documentation>
			<input message="tns:InsertCoursesRequest"/>
			<output message="tns:InsertCoursesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPDFPluginsByFormId">
			<documentation>This transaction returns a list of all available PDF Plugins for the presented form ID.</documentation>
			<input message="tns:GetPDFPluginsByFormIdRequest"/>
			<output message="tns:GetPDFPluginsByFormIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPDFQuestionnaire">
			<documentation>Creates a PDF questionnaire and returns the hyperlink to the file. If a survey ID is submitted, the questionnaire is personalized for the survey and can be used for scanning (hard copy procedure). For coversheet procedure, the second parameter should not be set.</documentation>
			<input message="tns:GetPDFQuestionnaireRequest"/>
			<output message="tns:GetPDFQuestionnaireResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPDFCoversheet">
			<documentation>Creates a PDF coversheet and returns the hyperlink to the file. The coversheet is personalized for the survey and can be used for scanning (coversheet procedure).</documentation>
			<input message="tns:GetPDFCoversheetRequest"/>
			<output message="tns:GetPDFCoversheetResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPDFPswd">
			<documentation>Creates a PDF with the PSWDs (cards) and returns the hyperlink to the file.</documentation>
			<input message="tns:GetPDFPswdRequest"/>
			<output message="tns:GetPDFPswdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCSVRawData">
			<documentation>Creates the CSV export file of the survey and returns the link to the file.</documentation>
			<input message="tns:GetCSVRawDataRequest"/>
			<output message="tns:GetCSVRawDataResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSPSSRawData">
			<documentation>Creates the SPSS export file of the survey and returns the link to the file.</documentation>
			<input message="tns:GetSPSSRawDataRequest"/>
			<output message="tns:GetSPSSRawDataResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteUser">
			<documentation>Deletes a user including all (!) child elements (courses, surveys, survey results, etc.).</documentation>
			<input message="tns:DeleteUserRequest"/>
			<output message="tns:DeleteUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteCourse">
			<documentation>Deletes a course including all (!) child elements (surveys, survey results, etc.).</documentation>
			<input message="tns:DeleteCourseRequest"/>
			<output message="tns:DeleteCourseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteSubunit">
			<documentation>Deletes a subunit including all (!) child elements (users, courses, surveys, survey results, etc.).</documentation>
			<input message="tns:DeleteSubunitRequest"/>
			<output message="tns:DeleteSubunitResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteSurvey">
			<documentation>Deletes a survey including all (!) child elements (survey results, etc.).</documentation>
			<input message="tns:DeleteSurveyRequest"/>
			<output message="tns:DeleteSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyRawData">
			<documentation>Creates an object which includes all sheet results (raw data) of the given survey. The SurveyRawData object also contains the survey object.</documentation>
			<input message="tns:GetSurveyRawDataRequest"/>
			<output message="tns:GetSurveyRawDataResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyResults">
			<documentation>Creates an object which includes all statistical results for all questions and question groups (indicators) of the given survey. The SurveyResultRawData object also contains the survey object. Statistical results include: Response count, mean, median, standard deviation, frequency distribution, abstention count, normed mean.</documentation>
			<input message="tns:GetSurveyResultsRequest"/>
			<output message="tns:GetSurveyResultsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertForm">
			<documentation>This method inserts a complete form/questionnaire into the database. The object returned contains the given internal database keys. The owner of the form will always be the main administrator. Notes: &lt;ul&gt;&lt;li&gt;An update of existing forms is not possible.&lt;/li&gt;&lt;li&gt;Deleting forms via SOAP is not possible.&lt;/li&gt;&lt;li&gt;The form elements "Picture" and "Double scaled question" are not yet supported by this transaction.&lt;/li&gt;&lt;/ul&gt;</documentation>
			<input message="tns:InsertFormRequest"/>
			<output message="tns:InsertFormResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetOnlineSurveyLinkByEmail">
			<documentation>Returns a link to the online survey for the presented email address and the internal survey ID. In order to automatically link the recipient to the survey, the parameter "AddRecipientToSurvey" should be set to "true". If this parameter is set to "false" and the recipient is not already linked to the survey, this function will return an error. The 4th parameter determines if new PSWDs are to be created in case not enough PSWDs were predefined.</documentation>
			<input message="tns:GetOnlineSurveyLinkByEmailRequest"/>
			<output message="tns:GetOnlineSurveyLinkByEmailResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertParticipants">
			<documentation>This method accepts anonymous participants (email must be set) and non-anonymous participants (other person properties can be set). With the boolean parameter, it is possible to remove all existing course participants before the new given participants are added. Please note: It is also possible to include the participants into the course object and to call either "InsertCourse" or "UpdateCourse".</documentation>
			<input message="tns:InsertParticipantsRequest"/>
			<output message="tns:InsertParticipantsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCustomReportsByForm">
			<documentation>The operation returns a list of available PDF report definitions of a given form.</documentation>
			<input message="tns:GetCustomReportsByFormRequest"/>
			<output message="tns:GetCustomReportsByFormResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSimpleForm">
			<documentation>Returns a simplified version of the form referenced to by the form ID.</documentation>
			<input message="tns:GetSimpleFormRequest"/>
			<output message="tns:GetSimpleFormResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetVFD">
			<documentation>The function exports a form into an .vfd (=VFD/VividForms form definition file ) file and returns a link to it.</documentation>
			<input message="tns:GetVFDRequest"/>
			<output message="tns:GetVFDResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyRawDataByTime">
			<documentation>Returns raw result data of all surveys that received results in the defined timeframe. The returned results are not limited to the defined timeframe. All results of the relevant surveys will be returned.</documentation>
			<input message="tns:GetSurveyRawDataByTimeRequest"/>
			<output message="tns:GetSurveyRawDataByTimeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertSurveyNotice">
			<documentation>Inserts a notice to a survey for a specified user. The user can be referenced by internal (PK), external (FK) or login (username).</documentation>
			<input message="tns:InsertSurveyNoticeRequest"/>
			<output message="tns:InsertSurveyNoticeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertModules">
			<documentation>Inserts a group of modules (that can contain groups of courses) into the system, It supports both Inserting and Updating of the data. It is also able to create a module-survey on them. The	function determines if the courses are already in the system and then calls the UpdateCourse method. This method includes the following sub-functions: -	Insert module participants -	Insert secondary instructors -	Create surveys -	Configure scheduled tasks for online surveys -	Send email with PDF questionnaire to defined email address -	Send email invitation for online surveys to given participants</documentation>
			<input message="tns:InsertModulesRequest"/>
			<output message="tns:InsertModulesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ActivateOptionalQuestionsForSurvey">
			<documentation>Enables/disables extending of the questionnaire of a specific survey with additional questions. Additionally it is possible to remind the instructor, that he is able to customize the questionnaire. If the second parameter is set to true, the instructor is provided with an information email, that contains a link to the editing environment. This functionality is called Instructor's Optional Questions or "Meldemaskenverfahren" in German.</documentation>
			<input message="tns:ActivateOptionalQuestionsForSurveyRequest"/>
			<output message="tns:ActivateOptionalQuestionsForSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ActivateOptionalQuestionsForSurveys">
			<documentation>Same as ActivateOptionalQuestionsForSurvey, but accepts a List/Array of SurveyIDs and therefore gives the possibility to enable, remind or disable optional questions for a group of surveys.</documentation>
			<input message="tns:ActivateOptionalQuestionsForSurveysRequest"/>
			<output message="tns:ActivateOptionalQuestionsForSurveysResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ActivateOptionalQuestionsForSurveyAddQuestions">
			<documentation>Same as ActivateOptionalQuestionsForSurvey, but gives the opportunity to add some question groups and question directly with the same SOAP operation.</documentation>
			<input message="tns:ActivateOptionalQuestionsForSurveyAddQuestionsRequest"/>
			<output message="tns:ActivateOptionalQuestionsForSurveyAddQuestionsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ListTasks">
			<documentation>Description: Returns all scheduled tasks that fit the given criteria. Returned list can be reduced specific subunits, forms, surveys and/or users. Possible values for TaskTypeIDList:&lt;br/&gt;1: PSWD to respondents&lt;br/&gt;2: Online survey reminder&lt;br/&gt;3: Finish survey&lt;br/&gt;4: Response Rate Notification</documentation>
			<input message="tns:ListTasksRequest"/>
			<output message="tns:ListTasksResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertInvitationTask">
			<documentation>Add an invitation task in the database.</documentation>
			<input message="tns:InsertInvitationTaskRequest"/>
			<output message="tns:InsertInvitationTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertRemindTask">
			<documentation>Store the changes made to the reminder task in the database.</documentation>
			<input message="tns:InsertRemindTaskRequest"/>
			<output message="tns:InsertRemindTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertResponseRateTask">
			<documentation>Insert a scheduled task of type "OnlineSurveyEmailsResponseRate".</documentation>
			<input message="tns:InsertResponseRateTaskRequest"/>
			<output message="tns:InsertResponseRateTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertCloseTask">
			<documentation>Store the changes made to the closing task in the database.</documentation>
			<input message="tns:InsertCloseTaskRequest"/>
			<output message="tns:InsertCloseTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateInvitationTask">
			<documentation>Store the changes made to the invitation task in the database.</documentation>
			<input message="tns:UpdateInvitationTaskRequest"/>
			<output message="tns:UpdateInvitationTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateRemindTask">
			<documentation>Store the changes made to the reminder task in the database.</documentation>
			<input message="tns:UpdateRemindTaskRequest"/>
			<output message="tns:UpdateRemindTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateResponseRateTask">
			<documentation>Updates a scheduled task type "OnlineSurveyEmailsResponseRate" in the database.</documentation>
			<input message="tns:UpdateResponseRateTaskRequest"/>
			<output message="tns:UpdateResponseRateTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateCloseTask">
			<documentation>Store the changes made to the closing task in the database.</documentation>
			<input message="tns:UpdateCloseTaskRequest"/>
			<output message="tns:UpdateCloseTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteTask">
			<documentation>Remove a task from the database.</documentation>
			<input message="tns:DeleteTaskRequest"/>
			<output message="tns:DeleteTaskResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSessionForUser">
			<documentation>Returns a session for a given user ID. The session object contains the session ID, the server URL and the user start page. This method can be used to authenticate users via SOAP.</documentation>
			<input message="tns:GetSessionForUserRequest"/>
			<output message="tns:GetSessionForUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCourseTypes">
			<documentation>Returns a list of course types. Optional only course types which are used for module evaluation.</documentation>
			<input message="tns:GetCourseTypesRequest"/>
			<output message="tns:GetCourseTypesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="CreatePdfReportDefinition">
			<documentation>PDF report definitions can be used to distribute full or partly survey reports to defined users. The PDF report definition is set up for a form. This method inserts the PDF report definitions for a form and returns the ID of the PDF report definition. The ID can be used in method "GetPDFReport".</documentation>
			<input message="tns:CreatePdfReportDefinitionRequest"/>
			<output message="tns:CreatePdfReportDefinitionResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPswdsByRecipient">
			<documentation>Returns unused online access codes (PSWD) for the shown email address. The access codes have to be sent out previously so that an access code is already assigned to the recipient. Closed surveys are ignored.</documentation>
			<input message="tns:GetPswdsByRecipientRequest"/>
			<output message="tns:GetPswdsByRecipientResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPercentOfCompletedSurveysByParticipant">
			<documentation>The method returns the percentage of surveys a participant has completed in a given time frame and subunit. This method considers anonymous and non-anonymous online surveys as well as non-anonymous paper surveys. The participant data need to be imported to a course prior to the survey creation.&lt;br/&gt;&lt;br/&gt;The following Surveys are considered:&lt;br/&gt;&lt;br/&gt;Surveys without scheduled tasks and a period which the start date of the given time frame is within the period.&lt;br/&gt;Surveys without scheduled tasks and a period which its start date is within the given time frame.&lt;br/&gt;&lt;br/&gt;For Surveys with scheduled tasks:&lt;br/&gt;&lt;br/&gt;When both first scheduled task and close survey task are defined then:&lt;br/&gt;The start date of the given time frame is within the tasks dates&lt;br/&gt;Or date of first task is within the given time frame.&lt;br/&gt;&lt;br/&gt;When only first scheduled task is defined then:&lt;br/&gt;Task start date should be before the end date of given time frame.&lt;br/&gt;&lt;br/&gt;When only last scheduled task (survey close) is defined then:&lt;br/&gt;Task should be ended after starting the given time frame.</documentation>
			<input message="tns:GetPercentOfCompletedSurveysByParticipantRequest"/>
			<output message="tns:GetPercentOfCompletedSurveysByParticipantResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAccessibleSubunitsForSubunitAdmin">
			<documentation>Returns all accessible subunits for the presented user id (only for subunit administrators).</documentation>
			<input message="tns:GetAccessibleSubunitsForSubunitAdminRequest"/>
			<output message="tns:GetAccessibleSubunitsForSubunitAdminResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UploadVolumeLicense">
			<documentation>This function doesn't work on a standard system. It is not possible to upload a volume license.</documentation>
			<input message="tns:UploadVolumeLicenseRequest"/>
			<output message="tns:UploadVolumeLicenseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUserVolumeLicenses">
			<documentation>This function doesn't work on a standard system. It is not possible to get a volume license.</documentation>
			<input message="tns:GetUserVolumeLicensesRequest"/>
			<output message="tns:GetUserVolumeLicensesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteVolumeLicense">
			<documentation>This function doesn't work on a standard system. It is not possible to delete a volume license.</documentation>
			<input message="tns:DeleteVolumeLicenseRequest"/>
			<output message="tns:DeleteVolumeLicenseResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ReplaceAnswersToOpenQuestions">
			<documentation>Updates answers to open questions with the provided comment.</documentation>
			<input message="tns:ReplaceAnswersToOpenQuestionsRequest"/>
			<output message="tns:ReplaceAnswersToOpenQuestionsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyOriginalScansPDF">
			<documentation>Create the original scans PDF for a survey / batch and return the link to the PDF.</documentation>
			<input message="tns:GetSurveyOriginalScansPDFRequest"/>
			<output message="tns:GetSurveyOriginalScansPDFResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetWebscanBatchList">
			<documentation>Get a list of all unfinished scan upload batches of a specific user.</documentation>
			<input message="tns:GetWebscanBatchListRequest"/>
			<output message="tns:GetWebscanBatchListResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ApplyActionOnWebscanBatch">
			<documentation>Apply the given action on a scan upload batch. Possible actions are determined by calling the GetWebscanBatchList transaction.</documentation>
			<input message="tns:ApplyActionOnWebscanBatchRequest"/>
			<output message="tns:ApplyActionOnWebscanBatchResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetFormActivationStatus">
			<documentation>Set the activation status of a form to activated or deactivated.</documentation>
			<input message="tns:SetFormActivationStatusRequest"/>
			<output message="tns:SetFormActivationStatusResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertCourseType">
			<documentation>Inserts a new course type. Optional it is possible to link to a module questionnaire.</documentation>
			<input message="tns:InsertCourseTypeRequest"/>
			<output message="tns:InsertCourseTypeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="ResetSurvey">
			<documentation>Resets the data of a survey. All survey results are deleted!</documentation>
			<input message="tns:ResetSurveyRequest"/>
			<output message="tns:ResetSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="PrefillDataIntoOnlineSurvey">
			<documentation>Inserts data for an existing online survey. The data is stored like temporary save has been used. When the participant opens the survey, the participant can check the pre-filled data, complete the survey and submit the data. The PSWD and all IDs have to correct and there if there is already temporarily saved data, the function doesn't add or change anything.</documentation>
			<input message="tns:PrefillDataIntoOnlineSurveyRequest"/>
			<output message="tns:PrefillDataIntoOnlineSurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyIDsByParams">
			<documentation>Get a list of survey IDs by the given parameters (Name, Subunits, Instructors, Periods, Forms, CourseTypes, Courses, ProgramOfStudies, Statuses, Types). For the parameter "Name" a wildcard "[*]" may be used as a substitute for zero or more characters.</documentation>
			<input message="tns:GetSurveyIDsByParamsRequest"/>
			<output message="tns:GetSurveyIDsByParamsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="AssignVolumeToSubunit">
			<documentation>This method assigns volume to a subunit, which can be completely used by that subunit.</documentation>
			<input message="tns:AssignVolumeToSubunitRequest"/>
			<output message="tns:AssignVolumeToSubunitResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteForm">
			<documentation>Deletes a form  including all (!) belonging surveys and child elements (survey results, etc.).</documentation>
			<input message="tns:DeleteFormRequest"/>
			<output message="tns:DeleteFormResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateCourseType">
			<documentation>Updates an existing course type. Optional it is possible to link to a module questionnaire.</documentation>
			<input message="tns:UpdateCourseTypeRequest"/>
			<output message="tns:UpdateCourseTypeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteCourseType">
			<documentation>Deletes an existing course type.</documentation>
			<input message="tns:DeleteCourseTypeRequest"/>
			<output message="tns:DeleteCourseTypeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetFiltersByFormId">
			<documentation>Get a list of filters for a specific form. The filters are used for hiding/deactivating questions in online surveys. The filters are also considered when paper-based surveys are processed. If a survey ID is given and filters on survey level are defined, the survey level filters are returned. No filters are returned if a survey ID is given but there are no filters on survey level. In that case filters on form level are ignored. There are 3 values available to define the filter action: 0 - disable; 1 - disable and hide; 2 - enable and show</documentation>
			<input message="tns:GetFiltersByFormIdRequest"/>
			<output message="tns:GetFiltersByFormIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetFiltersForForm">
			<documentation>Set the filters for a specific form. Existing filters on form level are overwritten. The filters are used for hiding/deactivating questions in online surveys. The filters are also considered when paper-based surveys are processed. If a survey ID is given, the filters are overwritten on survey level. In that case the filters on form level are left untouched. There are 3 values available to define the filter action: 0 - disable; 1 - disable and hide; 2 - enable and show</documentation>
			<input message="tns:SetFiltersForFormRequest"/>
			<output message="tns:SetFiltersForFormResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteFiltersByFormId">
			<documentation>Delete all existing filters of a specific form. The filters are used for hiding/deactivating questions in online surveys. The filters are also considered when paper-based surveys are processed. If a survey ID is given and filters on survey level are defined, the survey level filters are deleted. In that case the filters on form level are left untouched.</documentation>
			<input message="tns:DeleteFiltersByFormIdRequest"/>
			<output message="tns:DeleteFiltersByFormIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="AddEMailsToQueue">
			<documentation>Add one or more emails to the queue. The emails are sent by the MailService tool.</documentation>
			<input message="tns:AddEMailsToQueueRequest"/>
			<output message="tns:AddEMailsToQueueResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetEMailsByIDList">
			<documentation>Get a list of emails by the given list of IDs. (Status: 0 - pending; 1 - delivered; 2 - undelivered)</documentation>
			<input message="tns:GetEMailsByIDListRequest"/>
			<output message="tns:GetEMailsByIDListResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetEMailSummaryByCreationDate">
			<documentation>Get a summary of all pending, delivered and undelivered emails by a given date.</documentation>
			<input message="tns:GetEMailSummaryByCreationDateRequest"/>
			<output message="tns:GetEMailSummaryByCreationDateResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetVerifierInfoBySurvey">
			<documentation>Returns detailed information about the pending verification of the survey. There is data about the survey, batch, sheet, question and answer, including the coordinates of detected marks. With this data it is possible to monitor the verification or to get all data and continue an external process.</documentation>
			<input message="tns:GetVerifierInfoBySurveyRequest"/>
			<output message="tns:GetVerifierInfoBySurveyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetVerifierInfoBySerialNumber">
			<documentation>Returns detailed information about the pending verification of a single participant by serial number. There is data about the survey, batch, sheet, question and answer, including the coordinates of detected marks. With this data it is possible to monitor the verification or to get all data and continue an external process.</documentation>
			<input message="tns:GetVerifierInfoBySerialNumberRequest"/>
			<output message="tns:GetVerifierInfoBySerialNumberResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetVerifierInfoByParticipant">
			<documentation>Returns detailed information about the pending verification of a single participant by email address. There is data about the survey, batch, sheet, question and answer, including the coordinates of detected marks. With this data it is possible to monitor the verification or to get all data and continue an external process.</documentation>
			<input message="tns:GetVerifierInfoByParticipantRequest"/>
			<output message="tns:GetVerifierInfoByParticipantResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetVerifierInfoByBatch">
			<documentation>Returns detailed information about the pending verification of the batch. There is data about the survey, batch, sheet, question and answer, including the coordinates of detected marks. With this data it is possible to monitor the verification or to get all data and continue an external process.</documentation>
			<input message="tns:GetVerifierInfoByBatchRequest"/>
			<output message="tns:GetVerifierInfoByBatchResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUserSessionInfo">
			<documentation>Returns the relevant information for an existing session. Optionally the session can be resumed.</documentation>
			<input message="tns:GetUserSessionInfoRequest"/>
			<output message="tns:GetUserSessionInfoResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetConfigurationInfo">
			<documentation>Returns the relevant configuration options for an existing user.</documentation>
			<input message="tns:GetConfigurationInfoRequest"/>
			<output message="tns:GetConfigurationInfoResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteForms">
			<documentation>Deletes a list of forms (max. 100). Only unused forms are deleted.</documentation>
			<input message="tns:DeleteFormsRequest"/>
			<output message="tns:DeleteFormsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUserByLogin">
			<documentation>Returns user, referenced by login and password. If no user is found or the password is wrong a message is shown. 3 invalid login attempts for a specific login, lead to a 15 min blockade.</documentation>
			<input message="tns:GetUserByLoginRequest"/>
			<output message="tns:GetUserByLoginResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetEvaluationSummaryByParticipant">
			<documentation>Returns a summary of evaluation (e.g. survey details, scheduled tasks details, link to online survey, participation status) for surveys to which a participant was assigned. This method considers anonymous and non-anonymous online surveys as well as non-anonymous paper surveys. The survey types can be limited with an optional parameter.</documentation>
			<input message="tns:GetEvaluationSummaryByParticipantRequest"/>
			<output message="tns:GetEvaluationSummaryByParticipantResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPdfReportDefinition">
			<documentation>PDF report definitions can be used to distribute full or partly survey reports to defined users. This method returns a PDF report definition for a form by the given ID.</documentation>
			<input message="tns:GetPdfReportDefinitionRequest"/>
			<output message="tns:GetPdfReportDefinitionResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPdfReportDefinitionsByFormId">
			<documentation>PDF report definitions can be used to distribute full or partly survey reports to defined users. This method returns a list of PDF report definitions by the given form ID.</documentation>
			<input message="tns:GetPdfReportDefinitionsByFormIdRequest"/>
			<output message="tns:GetPdfReportDefinitionsByFormIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetFormTranslations">
			<documentation>This method returns a list of form translations by the given form ID.</documentation>
			<input message="tns:GetFormTranslationsRequest"/>
			<output message="tns:GetFormTranslationsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAllTextTemplateIDs">
			<documentation>Returns a list of all available text templates in the system. The content for the text template can be requested with the transaction "GetTextTemplateById".</documentation>
			<input message="tns:GetAllTextTemplateIDsRequest"/>
			<output message="tns:GetAllTextTemplateIDsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetTextTemplateById">
			<documentation>Returns a text template by the given Id. Optionally by giving a form ID, the form specific text template is delivered. The result includes the text template contents for all system languages.</documentation>
			<input message="tns:GetTextTemplateByIdRequest"/>
			<output message="tns:GetTextTemplateByIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUserByIdConsiderExternalID">
			<documentation>Returns a list of system users, where all users in this list have the same external id referenced by an internal user ID, an external ID which was imported previously into the system or a the system user name. If no user is found, an error is returned. The Boolean variables determine if the parent object user will also contain the child objects course, survey and participant.</documentation>
			<input message="tns:GetUserByIdConsiderExternalIDRequest"/>
			<output message="tns:GetUserByIdConsiderExternalIDResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetPswdSummary">
			<documentation>Returns an object with summarized information for a given PSWD. The object contains the survey ID, the information if the PSWD was used and the participant object if isset.</documentation>
			<input message="tns:GetPswdSummaryRequest"/>
			<output message="tns:GetPswdSummaryResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetFoldersByUserId">
			<documentation>Returns a list of all folders for the given user Id of an active user account. This transaction may also be used for getting access to the reports of a report creator account.</documentation>
			<input message="tns:GetFoldersByUserIdRequest"/>
			<output message="tns:GetFoldersByUserIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAllSurveysByFolderId">
			<documentation>Returns a list of surveys for a given folder Id. This transaction may also be used for getting access to the reports of a report creator account.</documentation>
			<input message="tns:GetAllSurveysByFolderIdRequest"/>
			<output message="tns:GetAllSurveysByFolderIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetIndicatorsByFormId">
			<documentation>Returns a list of all indicators for a given form Id. As long as there no free indicators exist, the indicators for question groups with dimension values are returned. Optionally by giving a survey Id, the survey specific values for mean and standard deviation are delivered.</documentation>
			<input message="tns:GetIndicatorsByFormIdRequest"/>
			<output message="tns:GetIndicatorsByFormIdResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SaveCustomUserSetting">
			<documentation>Inserts or updates a setting for the given key. The key can be up to 255 characters. The value can contain any text like JSON, array or simple text. The settings are bound to the current SOAP user.</documentation>
			<input message="tns:SaveCustomUserSettingRequest"/>
			<output message="tns:SaveCustomUserSettingResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteCustomUserSetting">
			<documentation>Deletes a setting for the given key. The settings are bound to the current SOAP user.</documentation>
			<input message="tns:DeleteCustomUserSettingRequest"/>
			<output message="tns:DeleteCustomUserSettingResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCustomUserSetting">
			<documentation>Gets a setting for the given key. The settings are bound to the current SOAP user.</documentation>
			<input message="tns:GetCustomUserSettingRequest"/>
			<output message="tns:GetCustomUserSettingResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCustomUserSettingsList">
			<documentation>Returns a list of all settings. The settings are bound to the current SOAP user.</documentation>
			<input message="tns:GetCustomUserSettingsListRequest"/>
			<output message="tns:GetCustomUserSettingsListResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyNotices">
			<documentation>Returns a list of all survey notices for the given survey ID.</documentation>
			<input message="tns:GetSurveyNoticesRequest"/>
			<output message="tns:GetSurveyNoticesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateSurveyNotice">
			<documentation>Updates a survey notice text by the given ID. Optionally the date is updated.</documentation>
			<input message="tns:UpdateSurveyNoticeRequest"/>
			<output message="tns:UpdateSurveyNoticeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="DeleteSurveyNotice">
			<documentation>Deletes a survey notice by the given ID.</documentation>
			<input message="tns:DeleteSurveyNoticeRequest"/>
			<output message="tns:DeleteSurveyNoticeResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="InsertSurveyRawData">
			<documentation>Inserts raw data for the given survey ID. Optionally the time span used for the date of each result can be set.</documentation>
			<input message="tns:InsertSurveyRawDataRequest"/>
			<output message="tns:InsertSurveyRawDataResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetLicenseInformation">
			<documentation>Returns a list of relevant license information, which might be used to distinguish between different system environments.</documentation>
			<input message="tns:GetLicenseInformationRequest"/>
			<output message="tns:GetLicenseInformationResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetDatabridgeTemplates">
			<documentation>Returns the list of active Databridge Template list.</documentation>
			<input message="tns:GetDatabridgeTemplatesRequest"/>
			<output message="tns:GetDatabridgeTemplatesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="TriggerDatabridgeImport">
			<documentation>Triggers the import process for a specifiec Databridge Template and returns the url of the file name with json serialised content.</documentation>
			<input message="tns:TriggerDatabridgeImportRequest"/>
			<output message="tns:TriggerDatabridgeImportResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetFormsInfoByParams">
			<documentation>Returns a list of forms information by the given parameters (SelectedFields, Users, SearchQuery, IncludeFormsOfOtherSubunitAdministrators, IncludeStatus, IncludeDeactivatedForms, ExcludeActiveForms, FolderId, IncludeChildForms). For the parameter "SearchQuery" a wildcard "[*]" may be used as a substitute for zero or more characters. The SearchQuery searches in short name, description and IDs of the forms.</documentation>
			<input message="tns:GetFormsInfoByParamsRequest"/>
			<output message="tns:GetFormsInfoByParamsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetFormUsageRestrictions">
			<documentation>Sets access of subunits, course types and periods to a specific form.</documentation>
			<input message="tns:SetFormUsageRestrictionsRequest"/>
			<output message="tns:SetFormUsageRestrictionsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SendInvitationToParticipants">
			<documentation>Sends out invitation or reminder mails to all participants of an online survey.</documentation>
			<input message="tns:SendInvitationToParticipantsRequest"/>
			<output message="tns:SendInvitationToParticipantsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyResponseDistribution">
			<documentation>Returns the distribution of responses (online or paper based) for one or more survey IDs. The list can be left blank in order to have a summary for the whole system. The data can either be grouped by survey ID or aggregated over all surveys. The time span can be limited by entering a start and / or an end time.</documentation>
			<input message="tns:GetSurveyResponseDistributionRequest"/>
			<output message="tns:GetSurveyResponseDistributionResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="MoveSurveyToSubstituteUser">
			<documentation>Moves a survey to a substitute user. The current PDF report can be sent to the substitute user. The course of the survey can be moved (if only one survey exists) or copied to the substitute user.</documentation>
			<input message="tns:MoveSurveyToSubstituteUserRequest"/>
			<output message="tns:MoveSurveyToSubstituteUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetUserIdsByParams">
			<documentation>Returns a list of user IDs by the given parameters (UserIds, Types, LoginName, ExternalID, Title, FirstName, SurName, UnitName, Email, Subunits, ActiveUsers). For the parameters LoginName, ExternalID, Title, FirstName, SurName, UnitName, or Email a wildcard "[*]" may be used as a substitute for zero or more characters. If ExtendedResponseAsJSON is set, a json string is returned with more information about the user. The result can be ordered by each returned field.</documentation>
			<input message="tns:GetUserIdsByParamsRequest"/>
			<output message="tns:GetUserIdsByParamsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetCourseIdsByParams">
			<documentation>Returns a list of course IDs by the given parameters (Name, CourseIds, Instructors, Subunits, Periods, CourseTypes, ProgramOfStudies, CourseCode, Room, ExternalID, CustomFieldEntry). For the parameters Name, ProgramOfStudies, CourseCode, Room, ExternalID or CustomFieldEntry a wildcard "[*]" may be used as a substitute for zero or more characters. If ExtendedResponseAsJSON is set, a json string is returned with more information about the course. The result can be ordered by each returned field.</documentation>
			<input message="tns:GetCourseIdsByParamsRequest"/>
			<output message="tns:GetCourseIdsByParamsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="MoveUser">
			<documentation>Moves the given user to another subunit. Subunit administrators cannot be moved. The parameter OverwriteSimilarUser defines what should happen with users that already exists in the target subunit (same title, first name, surname, unit name, user type). Should the user be moved as new user, or should the existing user be overwritten? Default: Move as new user.</documentation>
			<input message="tns:MoveUserRequest"/>
			<output message="tns:MoveUserResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetReaderScanBatchList">
			<documentation>Returns a list (JSON) with detailed information of all scanned batches in the Scanstation.</documentation>
			<input message="tns:GetReaderScanBatchListRequest"/>
			<output message="tns:GetReaderScanBatchListResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetParticipationTrackingList">
			<documentation>Returns a list (JSON) with all participation tracking information on the basis of the given parameters. As an extension to existing transactions the request is not limited to a specific participant.</documentation>
			<input message="tns:GetParticipationTrackingListRequest"/>
			<output message="tns:GetParticipationTrackingListResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSurveyResponseRateInformation">
			<documentation>Returns a list (JSON) with all response rate information for each calculation method (number of PSWDs created, number of PSWDs sent, number of course participants) on the basis of the given survey IDs.</documentation>
			<input message="tns:GetSurveyResponseRateInformationRequest"/>
			<output message="tns:GetSurveyResponseRateInformationResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetFormTranslations">
			<documentation>Sets the translations for one or more form(s) with its group and item lists. The request body is equivalent to the response body of GetFormTranslations.</documentation>
			<input message="tns:SetFormTranslationsRequest"/>
			<output message="tns:SetFormTranslationsResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetFormMainLanguage">
			<documentation>Sets the main language for a form or changes an existing main language. This can be used to set the main language before a call of the SOAP transaction SetFormTranslations.</documentation>
			<input message="tns:SetFormMainLanguageRequest"/>
			<output message="tns:SetFormMainLanguageResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAllAvailableTransactionsByUserLogin">
			<documentation>Returns a list of all transactions and the information if the specified user has the transaction right to call it.</documentation>
			<input message="tns:GetAllAvailableTransactionsByUserLoginRequest"/>
			<output message="tns:GetAllAvailableTransactionsByUserLoginResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetDataBySQLQuery">
			<documentation>Internal Transaction</documentation>
			<input message="tns:GetDataBySQLQueryRequest"/>
			<output message="tns:GetDataBySQLQueryResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetFormProperties">
			<documentation>Update the properties of a questionnaire of an administrator or subunit administrator. It is possible to update these properties: FormName, FormTitle, Activated, Extensible, ResultAccess, FormProcedure, FormSurveyType, FormFolder</documentation>
			<input message="tns:SetFormPropertiesRequest"/>
			<output message="tns:SetFormPropertiesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetUserPassword">
			<documentation>Internal Transaction</documentation>
			<input message="tns:SetUserPasswordRequest"/>
			<output message="tns:SetUserPasswordResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="SetGlobalConfiguration">
			<documentation>Internal Transaction</documentation>
			<input message="tns:SetGlobalConfigurationRequest"/>
			<output message="tns:SetGlobalConfigurationResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetAllProgramsOfStudy">
			<documentation>Returns a list of program of studies by the given parameters</documentation>
			<input message="tns:GetAllProgramsOfStudyRequest"/>
			<output message="tns:GetAllProgramsOfStudyResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateGroupTitles">
			<documentation>Updates the group titles for automatically created module questionnaires. Please note: The transaction should not be used for questionnaires that have already been distributed, since the recognition set is rewritten and the data may no longer be read.</documentation>
			<input message="tns:UpdateGroupTitlesRequest"/>
			<output message="tns:UpdateGroupTitlesResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="UpdateProfileImage">
			<documentation>Sets an image for an user account based on the internal user ID that is loaded from an URL or an accessible local server path. If an empty string is passed for the path, only the previous image is removed.</documentation>
			<input message="tns:UpdateProfileImageRequest"/>
			<output message="tns:UpdateProfileImageResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetEntitiesByKeyword">
			<documentation>Returns a list of entity information by the given keyword. This transaction allows a full text search for information within the most important entities (Subunits, Users, Courses, Surveys, Participants, Logs, Deliveries, Notices, Results). For the parameter "Keyword" a wildcard "[*]" may be used as a substitute for zero or more characters.</documentation>
			<input message="tns:GetEntitiesByKeywordRequest"/>
			<output message="tns:GetEntitiesByKeywordResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
		<operation name="GetSoapUsage">
			<documentation>Returns the amount of SOAP request since a timestamp.</documentation>
			<input message="tns:GetSoapUsageRequest"/>
			<output message="tns:GetSoapUsageResponse"/>
			<fault name="fault" message="tns:SoapfaultMessage"/>
		</operation>
	</portType>

	<binding name="Binding" type="tns:SoapPort">
		<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
		<operation name="RequestTicket">
			<soap:operation soapAction="urn:soap#soap"/>
			<input><soap:body use="literal" namespace="soapserver"/></input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPswdsByParticipant">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteUnusedPswds">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUsersBySubunit">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAllPeriods">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCoursesByUserId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCourse">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertCourse">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateCourse">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPeriod">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAllForms">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyTypes">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetFormByCourseIdAndPeriodId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetForm">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyById">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveysByCourse">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="CloseSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="OpenSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPswdsBySurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="IsPswdUnused">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertCentralSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetupCentralSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPDFReport">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSubunits">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSubunit">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertSubunit">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertCourses">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPDFPluginsByFormId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPDFQuestionnaire">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPDFCoversheet">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPDFPswd">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSPSSRawData">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCSVRawData">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteCourse">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteSubunit">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyRawData">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyResults">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertForm">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetOnlineSurveyLinkByEmail">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertParticipants">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCustomReportsByForm">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSimpleForm">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetVFD">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyRawDataByTime">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertSurveyNotice">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertModules">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ActivateOptionalQuestionsForSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ActivateOptionalQuestionsForSurveys">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ActivateOptionalQuestionsForSurveyAddQuestions">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ListTasks">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertInvitationTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertRemindTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertResponseRateTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertCloseTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateInvitationTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateRemindTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateResponseRateTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateCloseTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteTask">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSessionForUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCourseTypes">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="CreatePdfReportDefinition">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPswdsByRecipient">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPercentOfCompletedSurveysByParticipant">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAccessibleSubunitsForSubunitAdmin">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UploadVolumeLicense">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUserVolumeLicenses">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteVolumeLicense">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ReplaceAnswersToOpenQuestions">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyOriginalScansPDF">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetWebscanBatchList">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ApplyActionOnWebscanBatch">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetFormActivationStatus">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertCourseType">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="ResetSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="PrefillDataIntoOnlineSurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="AssignVolumeToSubunit">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteForm">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateCourseType">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteCourseType">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyIDsByParams">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetFiltersByFormId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetFiltersForForm">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteFiltersByFormId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="AddEMailsToQueue">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetEMailsByIDList">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetEMailSummaryByCreationDate">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetVerifierInfoBySurvey">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetVerifierInfoBySerialNumber">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetVerifierInfoByParticipant">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetVerifierInfoByBatch">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUserSessionInfo">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetConfigurationInfo">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteForms">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUserByLogin">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetEvaluationSummaryByParticipant">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPdfReportDefinition">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPdfReportDefinitionsByFormId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetFormTranslations">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAllTextTemplateIDs">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetTextTemplateById">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUserByIdConsiderExternalID">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetPswdSummary">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetFoldersByUserId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAllSurveysByFolderId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetIndicatorsByFormId">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SaveCustomUserSetting">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteCustomUserSetting">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCustomUserSetting">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCustomUserSettingsList">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyNotices">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateSurveyNotice">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="DeleteSurveyNotice">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="InsertSurveyRawData">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetLicenseInformation">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetDatabridgeTemplates">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="TriggerDatabridgeImport">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetFormsInfoByParams">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetFormUsageRestrictions">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SendInvitationToParticipants">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyResponseDistribution">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="MoveSurveyToSubstituteUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetUserIdsByParams">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetCourseIdsByParams">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="MoveUser">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetReaderScanBatchList">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetParticipationTrackingList">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSurveyResponseRateInformation">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header"/>
				<soap:body use="literal" namespace="soapserver"/>
			</input>
			<output><soap:body use="literal" namespace="soapserver"/></output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetFormTranslations">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetFormMainLanguage">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAllAvailableTransactionsByUserLogin">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetDataBySQLQuery">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetFormProperties">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetUserPassword">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="SetGlobalConfiguration">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetAllProgramsOfStudy">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateGroupTitles">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="UpdateProfileImage">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetEntitiesByKeyword">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
		<operation name="GetSoapUsage">
			<soap:operation soapAction="urn:soap#soap"/>
			<input>
				<soap:header use="literal" message="tns:Header" part="Header" />
				<soap:body use="literal" namespace="soapserver" />
			</input>
			<output>
				<soap:body use="literal" namespace="soapserver"/>
			</output>
			<fault name="fault"><soap:body use="literal"/></fault>
		</operation>
	</binding>
	<service name="soapserver">
		<port name="SoapPort" binding="tns:Binding">
			<soap:address location="http://127.0.0.1/system_folder/services/soapserver-v80.php"/>
		</port>
	</service>
</wsdl:definitions>